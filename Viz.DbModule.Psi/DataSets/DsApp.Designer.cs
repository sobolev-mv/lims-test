//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Viz.DbModule.Psi.DataSets {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2099.0")]
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DsApp")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DsApp : Devart.Data.Oracle.OracleDataSet {
        
        private vModulesDataTable tablevModules;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DsApp() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DsApp(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                Devart.Data.Oracle.OracleDataSet ds = new Devart.Data.Oracle.OracleDataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["vModules"] != null)) {
                    base.Tables.Add(new vModulesDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["vModules"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(System.Data.SchemaSerializationMode.IncludeSchema)]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vModulesDataTable vModules {
            get {
                return this.tablevModules;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new string Prefix {
            get {
                return base.Prefix;
            }
            set {
                base.Prefix = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DsApp cln = ((DsApp)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                Devart.Data.Oracle.OracleDataSet ds = new Devart.Data.Oracle.OracleDataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["vModules"] != null)) {
                    base.Tables.Add(new vModulesDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["vModules"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablevModules = ((vModulesDataTable)(base.Tables["vModules"]));
            if ((initTable == true)) {
                if ((this.tablevModules != null)) {
                    this.tablevModules.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DsApp";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablevModules = new vModulesDataTable();
            base.Tables.Add(this.tablevModules);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DsApp ds = new DsApp();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrefix() {
            return false;
        }
        
        public delegate void vModulesRowChangeEventHandler(object sender, vModulesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2099.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vModulesDataTable : Devart.Data.Oracle.OracleDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnVer;
            
            private System.Data.DataColumn columnPublicKeyToken;
            
            private System.Data.DataColumn columnDescr;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vModulesDataTable() {
                this.TableName = "vModules";
                this.Name = "vModules";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vModulesDataTable(Devart.Data.Oracle.OracleDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected vModulesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VerColumn {
                get {
                    return this.columnVer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PublicKeyTokenColumn {
                get {
                    return this.columnPublicKeyToken;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DescrColumn {
                get {
                    return this.columnDescr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vModulesRow this[int index] {
                get {
                    return ((vModulesRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event vModulesRowChangeEventHandler vModulesRowChanging;
            
            public event vModulesRowChangeEventHandler vModulesRowChanged;
            
            public event vModulesRowChangeEventHandler vModulesRowDeleting;
            
            public event vModulesRowChangeEventHandler vModulesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvModulesRow(vModulesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vModulesRow AddvModulesRow(string Id, string Ver, string PublicKeyToken, string Descr) {
                vModulesRow rowvModulesRow = ((vModulesRow)(this.NewRow()));
                rowvModulesRow.ItemArray = new object[] {
                        Id,
                        Ver,
                        PublicKeyToken,
                        Descr};
                this.Rows.Add(rowvModulesRow);
                return rowvModulesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vModulesRow FindById(string Id) {
                return ((vModulesRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                vModulesDataTable cln = ((vModulesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new vModulesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnVer = base.Columns["Ver"];
                this.columnPublicKeyToken = base.Columns["PublicKeyToken"];
                this.columnDescr = base.Columns["Descr"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnVer = new System.Data.DataColumn("Ver", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVer);
                this.columnPublicKeyToken = new System.Data.DataColumn("PublicKeyToken", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPublicKeyToken);
                this.columnDescr = new System.Data.DataColumn("Descr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescr);
                this.Constraints.Add(new System.Data.UniqueConstraint("vModulesKey1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnId.MaxLength = 50;
                this.columnVer.AllowDBNull = false;
                this.columnVer.MaxLength = 20;
                this.columnPublicKeyToken.AllowDBNull = false;
                this.columnPublicKeyToken.MaxLength = 30;
                this.columnDescr.MaxLength = 200;
                this.Connection = new Devart.Data.Oracle.OracleConnection("User Id=lims;Server=M2TST;");
                this.SelectCommand = new Devart.Data.Oracle.OracleCommand("select ID, VER, PUBLICKEYTOKEN, DESCR from LIMS.V_MODULES", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.Oracle.OracleCommand("INSERT INTO \"LIMS\".\"V_MODULES\" (\"ID\", \"VER\", \"PUBLICKEYTOKEN\", \"DESCR\") VALUES (:" +
                        "ID, :VER, :PUBLICKEYTOKEN, :DESCR)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.Oracle.OracleParameter param;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VER";
                param.Size = 0;
                param.SourceColumn = "VER";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PUBLICKEYTOKEN";
                param.Size = 0;
                param.SourceColumn = "PUBLICKEYTOKEN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCR";
                param.Size = 0;
                param.SourceColumn = "DESCR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.Oracle.OracleCommand(@"UPDATE ""LIMS"".""V_MODULES"" SET ""ID"" = :ID, ""VER"" = :VER, ""PUBLICKEYTOKEN"" = :PUBLICKEYTOKEN, ""DESCR"" = :DESCR WHERE ((""ID"" = :Original_ID) AND (""VER"" = :Original_VER) AND (""PUBLICKEYTOKEN"" = :Original_PUBLICKEYTOKEN) AND ((:IsNull_DESCR = 1 AND ""DESCR"" IS NULL) OR (""DESCR"" = :Original_DESCR)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VER";
                param.Size = 0;
                param.SourceColumn = "VER";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PUBLICKEYTOKEN";
                param.Size = 0;
                param.SourceColumn = "PUBLICKEYTOKEN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DESCR";
                param.Size = 0;
                param.SourceColumn = "DESCR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VER";
                param.Size = 0;
                param.SourceColumn = "VER";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PUBLICKEYTOKEN";
                param.Size = 0;
                param.SourceColumn = "PUBLICKEYTOKEN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCR";
                param.Size = 0;
                param.SourceColumn = "DESCR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCR";
                param.Size = 0;
                param.SourceColumn = "DESCR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.Oracle.OracleCommand("DELETE FROM \"LIMS\".\"V_MODULES\" WHERE ((\"ID\" = :Original_ID) AND (\"VER\" = :Origina" +
                        "l_VER) AND (\"PUBLICKEYTOKEN\" = :Original_PUBLICKEYTOKEN) AND ((:IsNull_DESCR = 1" +
                        " AND \"DESCR\" IS NULL) OR (\"DESCR\" = :Original_DESCR)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VER";
                param.Size = 0;
                param.SourceColumn = "VER";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PUBLICKEYTOKEN";
                param.Size = 0;
                param.SourceColumn = "PUBLICKEYTOKEN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DESCR";
                param.Size = 0;
                param.SourceColumn = "DESCR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DESCR";
                param.Size = 0;
                param.SourceColumn = "DESCR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "vModules";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("ID", "Id");
                this.TableMapping.ColumnMappings.Add("VER", "Ver");
                this.TableMapping.ColumnMappings.Add("PUBLICKEYTOKEN", "PublicKeyToken");
                this.TableMapping.ColumnMappings.Add("DESCR", "Descr");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vModulesRow NewvModulesRow() {
                return ((vModulesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new vModulesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(vModulesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vModulesRowChanged != null)) {
                    this.vModulesRowChanged(this, new vModulesRowChangeEvent(((vModulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vModulesRowChanging != null)) {
                    this.vModulesRowChanging(this, new vModulesRowChangeEvent(((vModulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vModulesRowDeleted != null)) {
                    this.vModulesRowDeleted(this, new vModulesRowChangeEvent(((vModulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vModulesRowDeleting != null)) {
                    this.vModulesRowDeleting(this, new vModulesRowChangeEvent(((vModulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevModulesRow(vModulesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DsApp ds = new DsApp();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vModulesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2099.0")]
        public partial class vModulesRow : System.Data.DataRow {
            
            private vModulesDataTable tablevModules;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vModulesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevModules = ((vModulesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Id {
                get {
                    return ((string)(this[this.tablevModules.IdColumn]));
                }
                set {
                    this[this.tablevModules.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ver {
                get {
                    return ((string)(this[this.tablevModules.VerColumn]));
                }
                set {
                    this[this.tablevModules.VerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PublicKeyToken {
                get {
                    return ((string)(this[this.tablevModules.PublicKeyTokenColumn]));
                }
                set {
                    this[this.tablevModules.PublicKeyTokenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descr {
                get {
                    try {
                        return ((string)(this[this.tablevModules.DescrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevModules.DescrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescrNull() {
                return this.IsNull(this.tablevModules.DescrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescrNull() {
                this[this.tablevModules.DescrColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.2099.0")]
        public class vModulesRowChangeEvent : System.EventArgs {
            
            private vModulesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vModulesRowChangeEvent(vModulesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vModulesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
