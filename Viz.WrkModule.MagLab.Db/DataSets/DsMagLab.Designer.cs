//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Viz.WrkModule.MagLab.Db.DataSets {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DsMagLab")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DsMagLab : Devart.Data.Oracle.OracleDataSet {
        
        private MlSamplesDataTable tableMlSamples;
        
        private FindModeDataTable tableFindMode;
        
        private MlDataDataTable tableMlData;
        
        private MlDataProbeDataTable tableMlDataProbe;
        
        private MlUsetDataTable tableMlUset;
        
        private MlValDataDataTable tableMlValData;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DsMagLab() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DsMagLab(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                Devart.Data.Oracle.OracleDataSet ds = new Devart.Data.Oracle.OracleDataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MlSamples"] != null)) {
                    base.Tables.Add(new MlSamplesDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlSamples"]))));
                }
                if ((ds.Tables["FindMode"] != null)) {
                    base.Tables.Add(new FindModeDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["FindMode"]))));
                }
                if ((ds.Tables["MlData"] != null)) {
                    base.Tables.Add(new MlDataDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlData"]))));
                }
                if ((ds.Tables["MlDataProbe"] != null)) {
                    base.Tables.Add(new MlDataProbeDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlDataProbe"]))));
                }
                if ((ds.Tables["MlUset"] != null)) {
                    base.Tables.Add(new MlUsetDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlUset"]))));
                }
                if ((ds.Tables["MlValData"] != null)) {
                    base.Tables.Add(new MlValDataDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlValData"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(System.Data.SchemaSerializationMode.IncludeSchema)]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MlSamplesDataTable MlSamples {
            get {
                return this.tableMlSamples;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FindModeDataTable FindMode {
            get {
                return this.tableFindMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MlDataDataTable MlData {
            get {
                return this.tableMlData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MlDataProbeDataTable MlDataProbe {
            get {
                return this.tableMlDataProbe;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MlUsetDataTable MlUset {
            get {
                return this.tableMlUset;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MlValDataDataTable MlValData {
            get {
                return this.tableMlValData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new string Prefix {
            get {
                return base.Prefix;
            }
            set {
                base.Prefix = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DsMagLab cln = ((DsMagLab)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                Devart.Data.Oracle.OracleDataSet ds = new Devart.Data.Oracle.OracleDataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MlSamples"] != null)) {
                    base.Tables.Add(new MlSamplesDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlSamples"]))));
                }
                if ((ds.Tables["FindMode"] != null)) {
                    base.Tables.Add(new FindModeDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["FindMode"]))));
                }
                if ((ds.Tables["MlData"] != null)) {
                    base.Tables.Add(new MlDataDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlData"]))));
                }
                if ((ds.Tables["MlDataProbe"] != null)) {
                    base.Tables.Add(new MlDataProbeDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlDataProbe"]))));
                }
                if ((ds.Tables["MlUset"] != null)) {
                    base.Tables.Add(new MlUsetDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlUset"]))));
                }
                if ((ds.Tables["MlValData"] != null)) {
                    base.Tables.Add(new MlValDataDataTable(((Devart.Data.Oracle.OracleDataTable)(ds.Tables["MlValData"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMlSamples = ((MlSamplesDataTable)(base.Tables["MlSamples"]));
            if ((initTable == true)) {
                if ((this.tableMlSamples != null)) {
                    this.tableMlSamples.InitVars();
                }
            }
            this.tableFindMode = ((FindModeDataTable)(base.Tables["FindMode"]));
            if ((initTable == true)) {
                if ((this.tableFindMode != null)) {
                    this.tableFindMode.InitVars();
                }
            }
            this.tableMlData = ((MlDataDataTable)(base.Tables["MlData"]));
            if ((initTable == true)) {
                if ((this.tableMlData != null)) {
                    this.tableMlData.InitVars();
                }
            }
            this.tableMlDataProbe = ((MlDataProbeDataTable)(base.Tables["MlDataProbe"]));
            if ((initTable == true)) {
                if ((this.tableMlDataProbe != null)) {
                    this.tableMlDataProbe.InitVars();
                }
            }
            this.tableMlUset = ((MlUsetDataTable)(base.Tables["MlUset"]));
            if ((initTable == true)) {
                if ((this.tableMlUset != null)) {
                    this.tableMlUset.InitVars();
                }
            }
            this.tableMlValData = ((MlValDataDataTable)(base.Tables["MlValData"]));
            if ((initTable == true)) {
                if ((this.tableMlValData != null)) {
                    this.tableMlValData.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DsMagLab";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMlSamples = new MlSamplesDataTable();
            base.Tables.Add(this.tableMlSamples);
            this.tableFindMode = new FindModeDataTable();
            base.Tables.Add(this.tableFindMode);
            this.tableMlData = new MlDataDataTable();
            base.Tables.Add(this.tableMlData);
            this.tableMlDataProbe = new MlDataProbeDataTable();
            base.Tables.Add(this.tableMlDataProbe);
            this.tableMlUset = new MlUsetDataTable();
            base.Tables.Add(this.tableMlUset);
            this.tableMlValData = new MlValDataDataTable();
            base.Tables.Add(this.tableMlValData);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DsMagLab ds = new DsMagLab();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrefix() {
            return false;
        }
        
        public delegate void MlSamplesRowChangeEventHandler(object sender, MlSamplesRowChangeEvent e);
        
        public delegate void FindModeRowChangeEventHandler(object sender, FindModeRowChangeEvent e);
        
        public delegate void MlDataRowChangeEventHandler(object sender, MlDataRowChangeEvent e);
        
        public delegate void MlDataProbeRowChangeEventHandler(object sender, MlDataProbeRowChangeEvent e);
        
        public delegate void MlUsetRowChangeEventHandler(object sender, MlUsetRowChangeEvent e);
        
        public delegate void MlValDataRowChangeEventHandler(object sender, MlValDataRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MlSamplesDataTable : Devart.Data.Oracle.OracleDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSampleId;
            
            private System.Data.DataColumn columnTestType;
            
            private System.Data.DataColumn columnSteelType;
            
            private System.Data.DataColumn columnThickNessNominal;
            
            private System.Data.DataColumn columnLine;
            
            private System.Data.DataColumn columnLaserFlag;
            
            private System.Data.DataColumn columnSamplePos;
            
            private System.Data.DataColumn columnMatLocalNumber;
            
            private System.Data.DataColumn columnMatMarkingInfo;
            
            private System.Data.DataColumn columnDtSample;
            
            private System.Data.DataColumn columnState;
            
            private System.Data.DataColumn columnErrText;
            
            private System.Data.DataColumn columnSampleNum;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlSamplesDataTable() {
                this.TableName = "MlSamples";
                this.Name = "MlSamples";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlSamplesDataTable(Devart.Data.Oracle.OracleDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MlSamplesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SampleIdColumn {
                get {
                    return this.columnSampleId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TestTypeColumn {
                get {
                    return this.columnTestType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SteelTypeColumn {
                get {
                    return this.columnSteelType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ThickNessNominalColumn {
                get {
                    return this.columnThickNessNominal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn LineColumn {
                get {
                    return this.columnLine;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn LaserFlagColumn {
                get {
                    return this.columnLaserFlag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SamplePosColumn {
                get {
                    return this.columnSamplePos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MatLocalNumberColumn {
                get {
                    return this.columnMatLocalNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MatMarkingInfoColumn {
                get {
                    return this.columnMatMarkingInfo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DtSampleColumn {
                get {
                    return this.columnDtSample;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ErrTextColumn {
                get {
                    return this.columnErrText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SampleNumColumn {
                get {
                    return this.columnSampleNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlSamplesRow this[int index] {
                get {
                    return ((MlSamplesRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event MlSamplesRowChangeEventHandler MlSamplesRowChanging;
            
            public event MlSamplesRowChangeEventHandler MlSamplesRowChanged;
            
            public event MlSamplesRowChangeEventHandler MlSamplesRowDeleting;
            
            public event MlSamplesRowChangeEventHandler MlSamplesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMlSamplesRow(MlSamplesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlSamplesRow AddMlSamplesRow(string SampleId, string TestType, string SteelType, decimal ThickNessNominal, string Line, int LaserFlag, string SamplePos, string MatLocalNumber, string MatMarkingInfo, System.DateTime DtSample, decimal State, string ErrText, string SampleNum) {
                MlSamplesRow rowMlSamplesRow = ((MlSamplesRow)(this.NewRow()));
                rowMlSamplesRow.ItemArray = new object[] {
                        SampleId,
                        TestType,
                        SteelType,
                        ThickNessNominal,
                        Line,
                        LaserFlag,
                        SamplePos,
                        MatLocalNumber,
                        MatMarkingInfo,
                        DtSample,
                        State,
                        ErrText,
                        SampleNum};
                this.Rows.Add(rowMlSamplesRow);
                return rowMlSamplesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlSamplesRow FindBySampleId(string SampleId) {
                return ((MlSamplesRow)(this.Rows.Find(new object[] {
                            SampleId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MlSamplesDataTable cln = ((MlSamplesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MlSamplesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSampleId = base.Columns["SampleId"];
                this.columnTestType = base.Columns["TestType"];
                this.columnSteelType = base.Columns["SteelType"];
                this.columnThickNessNominal = base.Columns["ThickNessNominal"];
                this.columnLine = base.Columns["Line"];
                this.columnLaserFlag = base.Columns["LaserFlag"];
                this.columnSamplePos = base.Columns["SamplePos"];
                this.columnMatLocalNumber = base.Columns["MatLocalNumber"];
                this.columnMatMarkingInfo = base.Columns["MatMarkingInfo"];
                this.columnDtSample = base.Columns["DtSample"];
                this.columnState = base.Columns["State"];
                this.columnErrText = base.Columns["ErrText"];
                this.columnSampleNum = base.Columns["SampleNum"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSampleId = new System.Data.DataColumn("SampleId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleId);
                this.columnTestType = new System.Data.DataColumn("TestType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestType);
                this.columnSteelType = new System.Data.DataColumn("SteelType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteelType);
                this.columnThickNessNominal = new System.Data.DataColumn("ThickNessNominal", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickNessNominal);
                this.columnLine = new System.Data.DataColumn("Line", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLine);
                this.columnLaserFlag = new System.Data.DataColumn("LaserFlag", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserFlag);
                this.columnSamplePos = new System.Data.DataColumn("SamplePos", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSamplePos);
                this.columnMatLocalNumber = new System.Data.DataColumn("MatLocalNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMatLocalNumber);
                this.columnMatMarkingInfo = new System.Data.DataColumn("MatMarkingInfo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMatMarkingInfo);
                this.columnDtSample = new System.Data.DataColumn("DtSample", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDtSample);
                this.columnState = new System.Data.DataColumn("State", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnErrText = new System.Data.DataColumn("ErrText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrText);
                this.columnSampleNum = new System.Data.DataColumn("SampleNum", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleNum);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSampleId}, true));
                this.columnSampleId.AllowDBNull = false;
                this.columnSampleId.Unique = true;
                this.columnSampleId.Caption = "SAMPLEID";
                this.columnSampleId.MaxLength = 20;
                this.columnTestType.Caption = "TESTTYPE";
                this.columnTestType.MaxLength = 10;
                this.columnSteelType.Caption = "STEELTYPE";
                this.columnSteelType.MaxLength = 5;
                this.columnThickNessNominal.Caption = "THICKNESSNOMINAL";
                this.columnLine.Caption = "LINE";
                this.columnLine.MaxLength = 10;
                this.columnLaserFlag.Caption = "LASERFLAG";
                this.columnSamplePos.Caption = "SAMPLEPOS";
                this.columnSamplePos.MaxLength = 2;
                this.columnMatLocalNumber.Caption = "MATLOCALNUMBER";
                this.columnMatLocalNumber.MaxLength = 40;
                this.columnMatMarkingInfo.Caption = "MATMARKINGINFO";
                this.columnMatMarkingInfo.MaxLength = 20;
                this.columnState.Caption = "STATE";
                this.columnErrText.Caption = "ERR_TEXT";
                this.columnErrText.MaxLength = 400;
                this.columnSampleNum.Caption = "SAMPLENUM";
                this.Connection = new Devart.Data.Oracle.OracleConnection("User Id=lims;Password=lims;Server=M2TST;");
                this.SelectCommand = new Devart.Data.Oracle.OracleCommand(@"SELECT  SAMPLEID, TESTTYPE, STEELTYPE, THICKNESSNOMINAL, LINE, LASERFLAG, SAMPLEPOS, MATLOCALNUMBER, MATMARKINGINFO, DTSAMPLE, STATE, ERR_TEXT,  SAMPLENUM  
FROM            LIMS.V_SAMPLEMEAS
WHERE        (DTSAMPLE BETWEEN :DT1 AND :DT2) AND ((SAMPLENUM LIKE :SMPID | | '%') OR
                         (:SMPID = 'Z')) AND ((MATMARKINGINFO LIKE :MARKINFO | | '%') OR
                         (:MARKINFO = 'Z')) AND ((MATLOCALNUMBER LIKE :MATLOC | | '%') OR
                         (:MATLOC = 'Z')) 
ORDER BY MATLOCALNUMBER, SAMPLEPOS", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.Oracle.OracleParameter param;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DT1";
                param.Size = 0;
                param.SourceColumn = "DtSample";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DT2";
                param.Size = 0;
                param.SourceColumn = "DtSample";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SMPID";
                param.Size = 0;
                param.SourceColumn = "SampleId";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MARKINFO";
                param.Size = 0;
                param.SourceColumn = "MatMarkingInfo";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MATLOC";
                param.Size = 0;
                param.SourceColumn = "MatLocalNumber";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "MlSamples";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("SAMPLEID", "SampleId");
                this.TableMapping.ColumnMappings.Add("TESTTYPE", "TestType");
                this.TableMapping.ColumnMappings.Add("STEELTYPE", "SteelType");
                this.TableMapping.ColumnMappings.Add("LINE", "Line");
                this.TableMapping.ColumnMappings.Add("MATLOCALNUMBER", "MatLocalNumber");
                this.TableMapping.ColumnMappings.Add("MATMARKINGINFO", "MatMarkingInfo");
                this.TableMapping.ColumnMappings.Add("STATE", "State");
                this.TableMapping.ColumnMappings.Add("ERR_TEXT", "ErrText");
                this.TableMapping.ColumnMappings.Add("DTSAMPLE", "DtSample");
                this.TableMapping.ColumnMappings.Add("SAMPLENUM", "SampleNum");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlSamplesRow NewMlSamplesRow() {
                return ((MlSamplesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MlSamplesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MlSamplesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MlSamplesRowChanged != null)) {
                    this.MlSamplesRowChanged(this, new MlSamplesRowChangeEvent(((MlSamplesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MlSamplesRowChanging != null)) {
                    this.MlSamplesRowChanging(this, new MlSamplesRowChangeEvent(((MlSamplesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MlSamplesRowDeleted != null)) {
                    this.MlSamplesRowDeleted(this, new MlSamplesRowChangeEvent(((MlSamplesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MlSamplesRowDeleting != null)) {
                    this.MlSamplesRowDeleting(this, new MlSamplesRowChangeEvent(((MlSamplesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMlSamplesRow(MlSamplesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DsMagLab ds = new DsMagLab();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MlSamplesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public partial class MlSamplesRow : System.Data.DataRow {
            
            private MlSamplesDataTable tableMlSamples;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlSamplesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMlSamples = ((MlSamplesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleId {
                get {
                    return ((string)(this[this.tableMlSamples.SampleIdColumn]));
                }
                set {
                    this[this.tableMlSamples.SampleIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestType {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.TestTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.TestTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SteelType {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.SteelTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.SteelTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ThickNessNominal {
                get {
                    try {
                        return ((decimal)(this[this.tableMlSamples.ThickNessNominalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.ThickNessNominalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Line {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.LineColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.LineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LaserFlag {
                get {
                    try {
                        return ((int)(this[this.tableMlSamples.LaserFlagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.LaserFlagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SamplePos {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.SamplePosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.SamplePosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MatLocalNumber {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.MatLocalNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.MatLocalNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MatMarkingInfo {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.MatMarkingInfoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.MatMarkingInfoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DtSample {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMlSamples.DtSampleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.DtSampleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal State {
                get {
                    try {
                        return ((decimal)(this[this.tableMlSamples.StateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.StateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrText {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.ErrTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.ErrTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleNum {
                get {
                    try {
                        return ((string)(this[this.tableMlSamples.SampleNumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlSamples.SampleNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestTypeNull() {
                return this.IsNull(this.tableMlSamples.TestTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestTypeNull() {
                this[this.tableMlSamples.TestTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSteelTypeNull() {
                return this.IsNull(this.tableMlSamples.SteelTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSteelTypeNull() {
                this[this.tableMlSamples.SteelTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThickNessNominalNull() {
                return this.IsNull(this.tableMlSamples.ThickNessNominalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThickNessNominalNull() {
                this[this.tableMlSamples.ThickNessNominalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNull() {
                return this.IsNull(this.tableMlSamples.LineColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNull() {
                this[this.tableMlSamples.LineColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaserFlagNull() {
                return this.IsNull(this.tableMlSamples.LaserFlagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaserFlagNull() {
                this[this.tableMlSamples.LaserFlagColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSamplePosNull() {
                return this.IsNull(this.tableMlSamples.SamplePosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSamplePosNull() {
                this[this.tableMlSamples.SamplePosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMatLocalNumberNull() {
                return this.IsNull(this.tableMlSamples.MatLocalNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMatLocalNumberNull() {
                this[this.tableMlSamples.MatLocalNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMatMarkingInfoNull() {
                return this.IsNull(this.tableMlSamples.MatMarkingInfoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMatMarkingInfoNull() {
                this[this.tableMlSamples.MatMarkingInfoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDtSampleNull() {
                return this.IsNull(this.tableMlSamples.DtSampleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDtSampleNull() {
                this[this.tableMlSamples.DtSampleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableMlSamples.StateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableMlSamples.StateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrTextNull() {
                return this.IsNull(this.tableMlSamples.ErrTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrTextNull() {
                this[this.tableMlSamples.ErrTextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleNumNull() {
                return this.IsNull(this.tableMlSamples.SampleNumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleNumNull() {
                this[this.tableMlSamples.SampleNumColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public class MlSamplesRowChangeEvent : System.EventArgs {
            
            private MlSamplesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlSamplesRowChangeEvent(MlSamplesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlSamplesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FindModeDataTable : Devart.Data.Oracle.OracleDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnNameMode;
            
            private System.Data.DataColumn columnCol1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindModeDataTable() {
                this.TableName = "FindMode";
                this.Name = "FindMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FindModeDataTable(Devart.Data.Oracle.OracleDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FindModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NameModeColumn {
                get {
                    return this.columnNameMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Col1Column {
                get {
                    return this.columnCol1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindModeRow this[int index] {
                get {
                    return ((FindModeRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event FindModeRowChangeEventHandler FindModeRowChanging;
            
            public event FindModeRowChangeEventHandler FindModeRowChanged;
            
            public event FindModeRowChangeEventHandler FindModeRowDeleting;
            
            public event FindModeRowChangeEventHandler FindModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFindModeRow(FindModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindModeRow AddFindModeRow(int Id, string NameMode, decimal Col1) {
                FindModeRow rowFindModeRow = ((FindModeRow)(this.NewRow()));
                rowFindModeRow.ItemArray = new object[] {
                        Id,
                        NameMode,
                        Col1};
                this.Rows.Add(rowFindModeRow);
                return rowFindModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindModeRow FindById(int Id) {
                return ((FindModeRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FindModeDataTable cln = ((FindModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FindModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnNameMode = base.Columns["NameMode"];
                this.columnCol1 = base.Columns["Col1"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnNameMode = new System.Data.DataColumn("NameMode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameMode);
                this.columnCol1 = new System.Data.DataColumn("Col1", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCol1);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindModeRow NewFindModeRow() {
                return ((FindModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FindModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FindModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FindModeRowChanged != null)) {
                    this.FindModeRowChanged(this, new FindModeRowChangeEvent(((FindModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FindModeRowChanging != null)) {
                    this.FindModeRowChanging(this, new FindModeRowChangeEvent(((FindModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FindModeRowDeleted != null)) {
                    this.FindModeRowDeleted(this, new FindModeRowChangeEvent(((FindModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FindModeRowDeleting != null)) {
                    this.FindModeRowDeleting(this, new FindModeRowChangeEvent(((FindModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFindModeRow(FindModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DsMagLab ds = new DsMagLab();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FindModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public partial class FindModeRow : System.Data.DataRow {
            
            private FindModeDataTable tableFindMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FindModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFindMode = ((FindModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableFindMode.IdColumn]));
                }
                set {
                    this[this.tableFindMode.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameMode {
                get {
                    try {
                        return ((string)(this[this.tableFindMode.NameModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFindMode.NameModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Col1 {
                get {
                    try {
                        return ((decimal)(this[this.tableFindMode.Col1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFindMode.Col1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameModeNull() {
                return this.IsNull(this.tableFindMode.NameModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameModeNull() {
                this[this.tableFindMode.NameModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCol1Null() {
                return this.IsNull(this.tableFindMode.Col1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCol1Null() {
                this[this.tableFindMode.Col1Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public class FindModeRowChangeEvent : System.EventArgs {
            
            private FindModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindModeRowChangeEvent(FindModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MlDataDataTable : Devart.Data.Oracle.OracleDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnSampleId;
            
            private System.Data.DataColumn columnUtype;
            
            private System.Data.DataColumn columnMassa;
            
            private System.Data.DataColumn columnB3;
            
            private System.Data.DataColumn columnB30;
            
            private System.Data.DataColumn columnB100;
            
            private System.Data.DataColumn columnB800;
            
            private System.Data.DataColumn columnB2500;
            
            private System.Data.DataColumn columnB5000;
            
            private System.Data.DataColumn columnP1050;
            
            private System.Data.DataColumn columnP1350;
            
            private System.Data.DataColumn columnP1550;
            
            private System.Data.DataColumn columnP1750;
            
            private System.Data.DataColumn columnP004500;
            
            private System.Data.DataColumn columnHd004500;
            
            private System.Data.DataColumn columnP01500;
            
            private System.Data.DataColumn columnHd01500;
            
            private System.Data.DataColumn columnP0041000;
            
            private System.Data.DataColumn columnHd0041000;
            
            private System.Data.DataColumn columnP011000;
            
            private System.Data.DataColumn columnHd01100;
            
            private System.Data.DataColumn columnIup1;
            
            private System.Data.DataColumn columnIup2;
            
            private System.Data.DataColumn columnIup3;
            
            private System.Data.DataColumn columnIdown1;
            
            private System.Data.DataColumn columnIdown2;
            
            private System.Data.DataColumn columnIdown3;
            
            private System.Data.DataColumn columnAdout;
            
            private System.Data.DataColumn columnAdin;
            
            private System.Data.DataColumn columnGib1;
            
            private System.Data.DataColumn columnGib2;
            
            private System.Data.DataColumn columnIup4;
            
            private System.Data.DataColumn columnIup5;
            
            private System.Data.DataColumn columnIdown4;
            
            private System.Data.DataColumn columnIdown5;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataDataTable() {
                this.TableName = "MlData";
                this.Name = "MlData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlDataDataTable(Devart.Data.Oracle.OracleDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MlDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SampleIdColumn {
                get {
                    return this.columnSampleId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn UtypeColumn {
                get {
                    return this.columnUtype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MassaColumn {
                get {
                    return this.columnMassa;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn B3Column {
                get {
                    return this.columnB3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn B30Column {
                get {
                    return this.columnB30;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn B100Column {
                get {
                    return this.columnB100;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn B800Column {
                get {
                    return this.columnB800;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn B2500Column {
                get {
                    return this.columnB2500;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn B5000Column {
                get {
                    return this.columnB5000;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P1050Column {
                get {
                    return this.columnP1050;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P1350Column {
                get {
                    return this.columnP1350;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P1550Column {
                get {
                    return this.columnP1550;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P1750Column {
                get {
                    return this.columnP1750;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P004500Column {
                get {
                    return this.columnP004500;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Hd004500Column {
                get {
                    return this.columnHd004500;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P01500Column {
                get {
                    return this.columnP01500;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Hd01500Column {
                get {
                    return this.columnHd01500;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P0041000Column {
                get {
                    return this.columnP0041000;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Hd0041000Column {
                get {
                    return this.columnHd0041000;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn P011000Column {
                get {
                    return this.columnP011000;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Hd01100Column {
                get {
                    return this.columnHd01100;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Iup1Column {
                get {
                    return this.columnIup1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Iup2Column {
                get {
                    return this.columnIup2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Iup3Column {
                get {
                    return this.columnIup3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Idown1Column {
                get {
                    return this.columnIdown1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Idown2Column {
                get {
                    return this.columnIdown2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Idown3Column {
                get {
                    return this.columnIdown3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn AdoutColumn {
                get {
                    return this.columnAdout;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn AdinColumn {
                get {
                    return this.columnAdin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Gib1Column {
                get {
                    return this.columnGib1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Gib2Column {
                get {
                    return this.columnGib2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Iup4Column {
                get {
                    return this.columnIup4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Iup5Column {
                get {
                    return this.columnIup5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Idown4Column {
                get {
                    return this.columnIdown4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn Idown5Column {
                get {
                    return this.columnIdown5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataRow this[int index] {
                get {
                    return ((MlDataRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event MlDataRowChangeEventHandler MlDataRowChanging;
            
            public event MlDataRowChangeEventHandler MlDataRowChanged;
            
            public event MlDataRowChangeEventHandler MlDataRowDeleting;
            
            public event MlDataRowChangeEventHandler MlDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMlDataRow(MlDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataRow AddMlDataRow(
                        string SampleId, 
                        int Utype, 
                        int Massa, 
                        decimal B3, 
                        decimal B30, 
                        decimal B100, 
                        decimal B800, 
                        decimal B2500, 
                        decimal B5000, 
                        decimal P1050, 
                        decimal P1350, 
                        decimal P1550, 
                        decimal P1750, 
                        decimal P004500, 
                        decimal Hd004500, 
                        decimal P01500, 
                        decimal Hd01500, 
                        decimal P0041000, 
                        decimal Hd0041000, 
                        decimal P011000, 
                        decimal Hd01100, 
                        decimal Iup1, 
                        decimal Iup2, 
                        decimal Iup3, 
                        decimal Idown1, 
                        decimal Idown2, 
                        decimal Idown3, 
                        string Adout, 
                        string Adin, 
                        int Gib1, 
                        int Gib2, 
                        decimal Iup4, 
                        decimal Iup5, 
                        decimal Idown4, 
                        decimal Idown5) {
                MlDataRow rowMlDataRow = ((MlDataRow)(this.NewRow()));
                rowMlDataRow.ItemArray = new object[] {
                        null,
                        SampleId,
                        Utype,
                        Massa,
                        B3,
                        B30,
                        B100,
                        B800,
                        B2500,
                        B5000,
                        P1050,
                        P1350,
                        P1550,
                        P1750,
                        P004500,
                        Hd004500,
                        P01500,
                        Hd01500,
                        P0041000,
                        Hd0041000,
                        P011000,
                        Hd01100,
                        Iup1,
                        Iup2,
                        Iup3,
                        Idown1,
                        Idown2,
                        Idown3,
                        Adout,
                        Adin,
                        Gib1,
                        Gib2,
                        Iup4,
                        Iup5,
                        Idown4,
                        Idown5};
                this.Rows.Add(rowMlDataRow);
                return rowMlDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataRow FindById(int Id) {
                return ((MlDataRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MlDataDataTable cln = ((MlDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MlDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnSampleId = base.Columns["SampleId"];
                this.columnUtype = base.Columns["Utype"];
                this.columnMassa = base.Columns["Massa"];
                this.columnB3 = base.Columns["B3"];
                this.columnB30 = base.Columns["B30"];
                this.columnB100 = base.Columns["B100"];
                this.columnB800 = base.Columns["B800"];
                this.columnB2500 = base.Columns["B2500"];
                this.columnB5000 = base.Columns["B5000"];
                this.columnP1050 = base.Columns["P1050"];
                this.columnP1350 = base.Columns["P1350"];
                this.columnP1550 = base.Columns["P1550"];
                this.columnP1750 = base.Columns["P1750"];
                this.columnP004500 = base.Columns["P004500"];
                this.columnHd004500 = base.Columns["Hd004500"];
                this.columnP01500 = base.Columns["P01500"];
                this.columnHd01500 = base.Columns["Hd01500"];
                this.columnP0041000 = base.Columns["P0041000"];
                this.columnHd0041000 = base.Columns["Hd0041000"];
                this.columnP011000 = base.Columns["P011000"];
                this.columnHd01100 = base.Columns["Hd01100"];
                this.columnIup1 = base.Columns["Iup1"];
                this.columnIup2 = base.Columns["Iup2"];
                this.columnIup3 = base.Columns["Iup3"];
                this.columnIdown1 = base.Columns["Idown1"];
                this.columnIdown2 = base.Columns["Idown2"];
                this.columnIdown3 = base.Columns["Idown3"];
                this.columnAdout = base.Columns["Adout"];
                this.columnAdin = base.Columns["Adin"];
                this.columnGib1 = base.Columns["Gib1"];
                this.columnGib2 = base.Columns["Gib2"];
                this.columnIup4 = base.Columns["Iup4"];
                this.columnIup5 = base.Columns["Iup5"];
                this.columnIdown4 = base.Columns["Idown4"];
                this.columnIdown5 = base.Columns["Idown5"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnSampleId = new System.Data.DataColumn("SampleId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleId);
                this.columnUtype = new System.Data.DataColumn("Utype", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUtype);
                this.columnMassa = new System.Data.DataColumn("Massa", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMassa);
                this.columnB3 = new System.Data.DataColumn("B3", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnB3);
                this.columnB30 = new System.Data.DataColumn("B30", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnB30);
                this.columnB100 = new System.Data.DataColumn("B100", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnB100);
                this.columnB800 = new System.Data.DataColumn("B800", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnB800);
                this.columnB2500 = new System.Data.DataColumn("B2500", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnB2500);
                this.columnB5000 = new System.Data.DataColumn("B5000", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnB5000);
                this.columnP1050 = new System.Data.DataColumn("P1050", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1050);
                this.columnP1350 = new System.Data.DataColumn("P1350", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1350);
                this.columnP1550 = new System.Data.DataColumn("P1550", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1550);
                this.columnP1750 = new System.Data.DataColumn("P1750", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1750);
                this.columnP004500 = new System.Data.DataColumn("P004500", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP004500);
                this.columnHd004500 = new System.Data.DataColumn("Hd004500", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHd004500);
                this.columnP01500 = new System.Data.DataColumn("P01500", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP01500);
                this.columnHd01500 = new System.Data.DataColumn("Hd01500", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHd01500);
                this.columnP0041000 = new System.Data.DataColumn("P0041000", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP0041000);
                this.columnHd0041000 = new System.Data.DataColumn("Hd0041000", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHd0041000);
                this.columnP011000 = new System.Data.DataColumn("P011000", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP011000);
                this.columnHd01100 = new System.Data.DataColumn("Hd01100", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHd01100);
                this.columnIup1 = new System.Data.DataColumn("Iup1", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIup1);
                this.columnIup2 = new System.Data.DataColumn("Iup2", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIup2);
                this.columnIup3 = new System.Data.DataColumn("Iup3", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIup3);
                this.columnIdown1 = new System.Data.DataColumn("Idown1", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdown1);
                this.columnIdown2 = new System.Data.DataColumn("Idown2", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdown2);
                this.columnIdown3 = new System.Data.DataColumn("Idown3", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdown3);
                this.columnAdout = new System.Data.DataColumn("Adout", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdout);
                this.columnAdin = new System.Data.DataColumn("Adin", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdin);
                this.columnGib1 = new System.Data.DataColumn("Gib1", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGib1);
                this.columnGib2 = new System.Data.DataColumn("Gib2", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGib2);
                this.columnIup4 = new System.Data.DataColumn("Iup4", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIup4);
                this.columnIup5 = new System.Data.DataColumn("Iup5", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIup5);
                this.columnIdown4 = new System.Data.DataColumn("Idown4", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdown4);
                this.columnIdown5 = new System.Data.DataColumn("Idown5", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdown5);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnId.Caption = "ID";
                this.columnSampleId.AllowDBNull = false;
                this.columnSampleId.Caption = "SAMPLEID";
                this.columnSampleId.MaxLength = 20;
                this.columnUtype.AllowDBNull = false;
                this.columnUtype.Caption = "UTYPE";
                this.columnMassa.Caption = "MASSA";
                this.columnHd004500.Caption = "HD004500";
                this.columnHd01500.Caption = "HD01500";
                this.columnHd0041000.Caption = "HD0041000";
                this.columnHd01100.Caption = "HD01100";
                this.columnIup1.Caption = "IUP1";
                this.columnIup2.Caption = "IUP2";
                this.columnIup3.Caption = "IUP3";
                this.columnIdown1.Caption = "IDOWN1";
                this.columnIdown2.Caption = "IDOWN2";
                this.columnIdown3.Caption = "IDOWN3";
                this.columnAdout.Caption = "ADOUT";
                this.columnAdout.MaxLength = 2;
                this.columnAdin.Caption = "ADIN";
                this.columnAdin.MaxLength = 2;
                this.columnGib1.Caption = "GIB1";
                this.columnGib2.Caption = "GIB2";
                this.Connection = new Devart.Data.Oracle.OracleConnection("User Id=lims;Password=lims;Server=M2TST;");
                this.SelectCommand = new Devart.Data.Oracle.OracleCommand(@"SELECT ID, SAMPLEID, UTYPE, MASSA, B3, B30, B100, B800, B2500, B5000, P1050, P1350,
             P1550, P1750, P004500, HD004500, P01500, HD01500, P0041000, HD0041000,
             P011000, HD01100, IUP1, IUP2, IUP3, IDOWN1, IDOWN2, IDOWN3,  ADOUT, ADIN,
             GIB1, GIB2, IUP4, IUP5, IDOWN4, IDOWN5
FROM LIMS.ML_MDATA
WHERE (SAMPLEID = :SMPLID) AND (UTYPE = :UTP)", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.Oracle.OracleParameter param;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SMPLID";
                param.Size = 1024;
                param.SourceColumn = "SAMPLEID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "UTP";
                param.Size = 0;
                param.SourceColumn = "UTYPE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                this.InsertCommand = new Devart.Data.Oracle.OracleCommand(@"INSERT INTO ""LIMS"".""ML_MDATA"" (""ID"", ""SAMPLEID"", ""UTYPE"", ""MASSA"", ""B3"", ""B30"", ""B100"", ""B800"", ""B2500"", ""B5000"", ""P1050"", ""P1350"", ""P1550"", ""P1750"", ""P004500"", ""HD004500"", ""P01500"", ""HD01500"", ""P0041000"", ""HD0041000"", ""P011000"", ""HD01100"", ""IUP1"", ""IUP2"", ""IUP3"", ""IDOWN1"", ""IDOWN2"", ""IDOWN3"", ""ADOUT"", ""ADIN"", ""GIB1"", ""GIB2"") VALUES (:ID, :SAMPLEID, :UTYPE, :MASSA, :B3, :B30, :B100, :B800, :B2500, :B5000, :P1050, :P1350, :P1550, :P1750, :P004500, :HD004500, :P01500, :HD01500, :P0041000, :HD0041000, :P011000, :HD01100, :IUP1, :IUP2, :IUP3, :IDOWN1, :IDOWN2, :IDOWN3, :ADOUT, :ADIN, :GIB1, :GIB2)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SAMPLEID";
                param.Size = 0;
                param.SourceColumn = "SAMPLEID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "UTYPE";
                param.Size = 0;
                param.SourceColumn = "UTYPE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MASSA";
                param.Size = 0;
                param.SourceColumn = "MASSA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B3";
                param.Size = 0;
                param.SourceColumn = "B3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B30";
                param.Size = 0;
                param.SourceColumn = "B30";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B100";
                param.Size = 0;
                param.SourceColumn = "B100";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B800";
                param.Size = 0;
                param.SourceColumn = "B800";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B2500";
                param.Size = 0;
                param.SourceColumn = "B2500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B5000";
                param.Size = 0;
                param.SourceColumn = "B5000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1050";
                param.Size = 0;
                param.SourceColumn = "P1050";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1350";
                param.Size = 0;
                param.SourceColumn = "P1350";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1550";
                param.Size = 0;
                param.SourceColumn = "P1550";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1750";
                param.Size = 0;
                param.SourceColumn = "P1750";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P004500";
                param.Size = 0;
                param.SourceColumn = "P004500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD004500";
                param.Size = 0;
                param.SourceColumn = "HD004500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P01500";
                param.Size = 0;
                param.SourceColumn = "P01500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD01500";
                param.Size = 0;
                param.SourceColumn = "HD01500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P0041000";
                param.Size = 0;
                param.SourceColumn = "P0041000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD0041000";
                param.Size = 0;
                param.SourceColumn = "HD0041000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P011000";
                param.Size = 0;
                param.SourceColumn = "P011000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD01100";
                param.Size = 0;
                param.SourceColumn = "HD01100";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP1";
                param.Size = 0;
                param.SourceColumn = "IUP1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP2";
                param.Size = 0;
                param.SourceColumn = "IUP2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP3";
                param.Size = 0;
                param.SourceColumn = "IUP3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN1";
                param.Size = 0;
                param.SourceColumn = "IDOWN1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN2";
                param.Size = 0;
                param.SourceColumn = "IDOWN2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN3";
                param.Size = 0;
                param.SourceColumn = "IDOWN3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ADOUT";
                param.Size = 0;
                param.SourceColumn = "ADOUT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ADIN";
                param.Size = 0;
                param.SourceColumn = "ADIN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "GIB1";
                param.Size = 0;
                param.SourceColumn = "GIB1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "GIB2";
                param.Size = 0;
                param.SourceColumn = "GIB2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.Oracle.OracleCommand(@"UPDATE  LIMS.ML_MDATA
SET              ID = :ID, MASSA = :MASSA, B3 = :B3, B30 = :B30, B100 = :B100, B800 = :B800, B2500 = :B2500, B5000 = :B5000, P1050 = :P1050, P1350 = :P1350, 
                      P1550 = :P1550, P1750 = :P1750, P004500 = :P004500, HD004500 = :HD004500, P01500 = :P01500, HD01500 = :HD01500, P0041000 = :P0041000, 
                      HD0041000 = :HD0041000, P011000 = :P011000, HD01100 = :HD01100, IUP1 = :IUP1, IUP2 = :IUP2, IUP3 = :IUP3, IDOWN1 = :IDOWN1, 
                      IDOWN2 = :IDOWN2, IDOWN3 = :IDOWN3, ADOUT = :ADOUT, ADIN = :ADIN, GIB1 = :GIB1, GIB2 = :GIB2, IUP4 = :IUP4, IUP5 = :IUP5, IDOWN4 = :IDOWN4, IDOWN5 = :IDOWN5  WHERE (ID = :Original_ID)", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MASSA";
                param.Size = 0;
                param.SourceColumn = "MASSA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B3";
                param.Size = 0;
                param.SourceColumn = "B3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B30";
                param.Size = 0;
                param.SourceColumn = "B30";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B100";
                param.Size = 0;
                param.SourceColumn = "B100";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B800";
                param.Size = 0;
                param.SourceColumn = "B800";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B2500";
                param.Size = 0;
                param.SourceColumn = "B2500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "B5000";
                param.Size = 0;
                param.SourceColumn = "B5000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1050";
                param.Size = 0;
                param.SourceColumn = "P1050";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1350";
                param.Size = 0;
                param.SourceColumn = "P1350";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1550";
                param.Size = 0;
                param.SourceColumn = "P1550";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P1750";
                param.Size = 0;
                param.SourceColumn = "P1750";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P004500";
                param.Size = 0;
                param.SourceColumn = "P004500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD004500";
                param.Size = 0;
                param.SourceColumn = "HD004500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P01500";
                param.Size = 0;
                param.SourceColumn = "P01500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD01500";
                param.Size = 0;
                param.SourceColumn = "HD01500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P0041000";
                param.Size = 0;
                param.SourceColumn = "P0041000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD0041000";
                param.Size = 0;
                param.SourceColumn = "HD0041000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "P011000";
                param.Size = 0;
                param.SourceColumn = "P011000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "HD01100";
                param.Size = 0;
                param.SourceColumn = "HD01100";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP1";
                param.Size = 0;
                param.SourceColumn = "IUP1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP2";
                param.Size = 0;
                param.SourceColumn = "IUP2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP3";
                param.Size = 0;
                param.SourceColumn = "IUP3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN1";
                param.Size = 0;
                param.SourceColumn = "IDOWN1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN2";
                param.Size = 0;
                param.SourceColumn = "IDOWN2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN3";
                param.Size = 0;
                param.SourceColumn = "IDOWN3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ADOUT";
                param.Size = 1024;
                param.SourceColumn = "ADOUT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ADIN";
                param.Size = 1024;
                param.SourceColumn = "ADIN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "GIB1";
                param.Size = 0;
                param.SourceColumn = "GIB1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "GIB2";
                param.Size = 0;
                param.SourceColumn = "GIB2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP4";
                param.Size = 0;
                param.SourceColumn = "IUP4";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IUP5";
                param.Size = 0;
                param.SourceColumn = "IUP5";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN4";
                param.Size = 0;
                param.SourceColumn = "IDOWN4";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDOWN5";
                param.Size = 0;
                param.SourceColumn = "IDOWN5";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.Oracle.OracleCommand("DELETE FROM \"LIMS\".\"ML_MDATA\" WHERE ((\"ID\" = :Original_ID) AND (\"SAMPLEID\" = :Ori" +
                        "ginal_SAMPLEID) AND (\"UTYPE\" = :Original_UTYPE) AND ((:IsNull_MASSA = 1 AND \"MAS" +
                        "SA\" IS NULL) OR (\"MASSA\" = :Original_MASSA)) AND ((:IsNull_B3 = 1 AND \"B3\" IS NU" +
                        "LL) OR (\"B3\" = :Original_B3)) AND ((:IsNull_B30 = 1 AND \"B30\" IS NULL) OR (\"B30\"" +
                        " = :Original_B30)) AND ((:IsNull_B100 = 1 AND \"B100\" IS NULL) OR (\"B100\" = :Orig" +
                        "inal_B100)) AND ((:IsNull_B800 = 1 AND \"B800\" IS NULL) OR (\"B800\" = :Original_B8" +
                        "00)) AND ((:IsNull_B2500 = 1 AND \"B2500\" IS NULL) OR (\"B2500\" = :Original_B2500)" +
                        ") AND ((:IsNull_B5000 = 1 AND \"B5000\" IS NULL) OR (\"B5000\" = :Original_B5000)) A" +
                        "ND ((:IsNull_P1050 = 1 AND \"P1050\" IS NULL) OR (\"P1050\" = :Original_P1050)) AND " +
                        "((:IsNull_P1350 = 1 AND \"P1350\" IS NULL) OR (\"P1350\" = :Original_P1350)) AND ((:" +
                        "IsNull_P1550 = 1 AND \"P1550\" IS NULL) OR (\"P1550\" = :Original_P1550)) AND ((:IsN" +
                        "ull_P1750 = 1 AND \"P1750\" IS NULL) OR (\"P1750\" = :Original_P1750)) AND ((:IsNull" +
                        "_P004500 = 1 AND \"P004500\" IS NULL) OR (\"P004500\" = :Original_P004500)) AND ((:I" +
                        "sNull_HD004500 = 1 AND \"HD004500\" IS NULL) OR (\"HD004500\" = :Original_HD004500))" +
                        " AND ((:IsNull_P01500 = 1 AND \"P01500\" IS NULL) OR (\"P01500\" = :Original_P01500)" +
                        ") AND ((:IsNull_HD01500 = 1 AND \"HD01500\" IS NULL) OR (\"HD01500\" = :Original_HD0" +
                        "1500)) AND ((:IsNull_P0041000 = 1 AND \"P0041000\" IS NULL) OR (\"P0041000\" = :Orig" +
                        "inal_P0041000)) AND ((:IsNull_HD0041000 = 1 AND \"HD0041000\" IS NULL) OR (\"HD0041" +
                        "000\" = :Original_HD0041000)) AND ((:IsNull_P011000 = 1 AND \"P011000\" IS NULL) OR" +
                        " (\"P011000\" = :Original_P011000)) AND ((:IsNull_HD01100 = 1 AND \"HD01100\" IS NUL" +
                        "L) OR (\"HD01100\" = :Original_HD01100)) AND ((:IsNull_IUP1 = 1 AND \"IUP1\" IS NULL" +
                        ") OR (\"IUP1\" = :Original_IUP1)) AND ((:IsNull_IUP2 = 1 AND \"IUP2\" IS NULL) OR (\"" +
                        "IUP2\" = :Original_IUP2)) AND ((:IsNull_IUP3 = 1 AND \"IUP3\" IS NULL) OR (\"IUP3\" =" +
                        " :Original_IUP3)) AND ((:IsNull_IDOWN1 = 1 AND \"IDOWN1\" IS NULL) OR (\"IDOWN1\" = " +
                        ":Original_IDOWN1)) AND ((:IsNull_IDOWN2 = 1 AND \"IDOWN2\" IS NULL) OR (\"IDOWN2\" =" +
                        " :Original_IDOWN2)) AND ((:IsNull_IDOWN3 = 1 AND \"IDOWN3\" IS NULL) OR (\"IDOWN3\" " +
                        "= :Original_IDOWN3)) AND ((:IsNull_ADOUT = 1 AND \"ADOUT\" IS NULL) OR (\"ADOUT\" = " +
                        ":Original_ADOUT)) AND ((:IsNull_ADIN = 1 AND \"ADIN\" IS NULL) OR (\"ADIN\" = :Origi" +
                        "nal_ADIN)) AND ((:IsNull_GIB1 = 1 AND \"GIB1\" IS NULL) OR (\"GIB1\" = :Original_GIB" +
                        "1)) AND ((:IsNull_GIB2 = 1 AND \"GIB2\" IS NULL) OR (\"GIB2\" = :Original_GIB2)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SAMPLEID";
                param.Size = 0;
                param.SourceColumn = "SAMPLEID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_UTYPE";
                param.Size = 0;
                param.SourceColumn = "UTYPE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_MASSA";
                param.Size = 0;
                param.SourceColumn = "MASSA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MASSA";
                param.Size = 0;
                param.SourceColumn = "MASSA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_B3";
                param.Size = 0;
                param.SourceColumn = "B3";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_B3";
                param.Size = 0;
                param.SourceColumn = "B3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_B30";
                param.Size = 0;
                param.SourceColumn = "B30";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_B30";
                param.Size = 0;
                param.SourceColumn = "B30";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_B100";
                param.Size = 0;
                param.SourceColumn = "B100";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_B100";
                param.Size = 0;
                param.SourceColumn = "B100";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_B800";
                param.Size = 0;
                param.SourceColumn = "B800";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_B800";
                param.Size = 0;
                param.SourceColumn = "B800";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_B2500";
                param.Size = 0;
                param.SourceColumn = "B2500";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_B2500";
                param.Size = 0;
                param.SourceColumn = "B2500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_B5000";
                param.Size = 0;
                param.SourceColumn = "B5000";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_B5000";
                param.Size = 0;
                param.SourceColumn = "B5000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P1050";
                param.Size = 0;
                param.SourceColumn = "P1050";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P1050";
                param.Size = 0;
                param.SourceColumn = "P1050";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P1350";
                param.Size = 0;
                param.SourceColumn = "P1350";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P1350";
                param.Size = 0;
                param.SourceColumn = "P1350";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P1550";
                param.Size = 0;
                param.SourceColumn = "P1550";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P1550";
                param.Size = 0;
                param.SourceColumn = "P1550";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P1750";
                param.Size = 0;
                param.SourceColumn = "P1750";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P1750";
                param.Size = 0;
                param.SourceColumn = "P1750";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P004500";
                param.Size = 0;
                param.SourceColumn = "P004500";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P004500";
                param.Size = 0;
                param.SourceColumn = "P004500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HD004500";
                param.Size = 0;
                param.SourceColumn = "HD004500";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HD004500";
                param.Size = 0;
                param.SourceColumn = "HD004500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P01500";
                param.Size = 0;
                param.SourceColumn = "P01500";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P01500";
                param.Size = 0;
                param.SourceColumn = "P01500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HD01500";
                param.Size = 0;
                param.SourceColumn = "HD01500";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HD01500";
                param.Size = 0;
                param.SourceColumn = "HD01500";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P0041000";
                param.Size = 0;
                param.SourceColumn = "P0041000";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P0041000";
                param.Size = 0;
                param.SourceColumn = "P0041000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HD0041000";
                param.Size = 0;
                param.SourceColumn = "HD0041000";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HD0041000";
                param.Size = 0;
                param.SourceColumn = "HD0041000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_P011000";
                param.Size = 0;
                param.SourceColumn = "P011000";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_P011000";
                param.Size = 0;
                param.SourceColumn = "P011000";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_HD01100";
                param.Size = 0;
                param.SourceColumn = "HD01100";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_HD01100";
                param.Size = 0;
                param.SourceColumn = "HD01100";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IUP1";
                param.Size = 0;
                param.SourceColumn = "IUP1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IUP1";
                param.Size = 0;
                param.SourceColumn = "IUP1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IUP2";
                param.Size = 0;
                param.SourceColumn = "IUP2";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IUP2";
                param.Size = 0;
                param.SourceColumn = "IUP2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IUP3";
                param.Size = 0;
                param.SourceColumn = "IUP3";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IUP3";
                param.Size = 0;
                param.SourceColumn = "IUP3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IDOWN1";
                param.Size = 0;
                param.SourceColumn = "IDOWN1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDOWN1";
                param.Size = 0;
                param.SourceColumn = "IDOWN1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IDOWN2";
                param.Size = 0;
                param.SourceColumn = "IDOWN2";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDOWN2";
                param.Size = 0;
                param.SourceColumn = "IDOWN2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IDOWN3";
                param.Size = 0;
                param.SourceColumn = "IDOWN3";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDOWN3";
                param.Size = 0;
                param.SourceColumn = "IDOWN3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ADOUT";
                param.Size = 0;
                param.SourceColumn = "ADOUT";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ADOUT";
                param.Size = 0;
                param.SourceColumn = "ADOUT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ADIN";
                param.Size = 0;
                param.SourceColumn = "ADIN";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ADIN";
                param.Size = 0;
                param.SourceColumn = "ADIN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_GIB1";
                param.Size = 0;
                param.SourceColumn = "GIB1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_GIB1";
                param.Size = 0;
                param.SourceColumn = "GIB1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_GIB2";
                param.Size = 0;
                param.SourceColumn = "GIB2";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_GIB2";
                param.Size = 0;
                param.SourceColumn = "GIB2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "MlData";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("ID", "Id");
                this.TableMapping.ColumnMappings.Add("SAMPLEID", "SampleId");
                this.TableMapping.ColumnMappings.Add("UTYPE", "Utype");
                this.TableMapping.ColumnMappings.Add("MASSA", "Massa");
                this.TableMapping.ColumnMappings.Add("B3", "B3");
                this.TableMapping.ColumnMappings.Add("B30", "B30");
                this.TableMapping.ColumnMappings.Add("B100", "B100");
                this.TableMapping.ColumnMappings.Add("B800", "B800");
                this.TableMapping.ColumnMappings.Add("B2500", "B2500");
                this.TableMapping.ColumnMappings.Add("B5000", "B5000");
                this.TableMapping.ColumnMappings.Add("P1050", "P1050");
                this.TableMapping.ColumnMappings.Add("P1350", "P1350");
                this.TableMapping.ColumnMappings.Add("P1550", "P1550");
                this.TableMapping.ColumnMappings.Add("P1750", "P1750");
                this.TableMapping.ColumnMappings.Add("P004500", "P004500");
                this.TableMapping.ColumnMappings.Add("HD004500", "Hd004500");
                this.TableMapping.ColumnMappings.Add("P01500", "P01500");
                this.TableMapping.ColumnMappings.Add("HD01500", "Hd01500");
                this.TableMapping.ColumnMappings.Add("P0041000", "P0041000");
                this.TableMapping.ColumnMappings.Add("HD0041000", "Hd0041000");
                this.TableMapping.ColumnMappings.Add("P011000", "P011000");
                this.TableMapping.ColumnMappings.Add("HD01100", "Hd01100");
                this.TableMapping.ColumnMappings.Add("IUP1", "Iup1");
                this.TableMapping.ColumnMappings.Add("IUP2", "Iup2");
                this.TableMapping.ColumnMappings.Add("IUP3", "Iup3");
                this.TableMapping.ColumnMappings.Add("IDOWN1", "Idown1");
                this.TableMapping.ColumnMappings.Add("IDOWN2", "Idown2");
                this.TableMapping.ColumnMappings.Add("IDOWN3", "Idown3");
                this.TableMapping.ColumnMappings.Add("ADOUT", "Adout");
                this.TableMapping.ColumnMappings.Add("ADIN", "Adin");
                this.TableMapping.ColumnMappings.Add("GIB1", "Gib1");
                this.TableMapping.ColumnMappings.Add("GIB2", "Gib2");
                this.TableMapping.ColumnMappings.Add("IUP4", "Iup4");
                this.TableMapping.ColumnMappings.Add("IUP5", "Iup5");
                this.TableMapping.ColumnMappings.Add("IDOWN4", "Idown4");
                this.TableMapping.ColumnMappings.Add("IDOWN5", "Idown5");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataRow NewMlDataRow() {
                return ((MlDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MlDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MlDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MlDataRowChanged != null)) {
                    this.MlDataRowChanged(this, new MlDataRowChangeEvent(((MlDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MlDataRowChanging != null)) {
                    this.MlDataRowChanging(this, new MlDataRowChangeEvent(((MlDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MlDataRowDeleted != null)) {
                    this.MlDataRowDeleted(this, new MlDataRowChangeEvent(((MlDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MlDataRowDeleting != null)) {
                    this.MlDataRowDeleting(this, new MlDataRowChangeEvent(((MlDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMlDataRow(MlDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DsMagLab ds = new DsMagLab();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MlDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public partial class MlDataRow : System.Data.DataRow {
            
            private MlDataDataTable tableMlData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMlData = ((MlDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableMlData.IdColumn]));
                }
                set {
                    this[this.tableMlData.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleId {
                get {
                    return ((string)(this[this.tableMlData.SampleIdColumn]));
                }
                set {
                    this[this.tableMlData.SampleIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Utype {
                get {
                    return ((int)(this[this.tableMlData.UtypeColumn]));
                }
                set {
                    this[this.tableMlData.UtypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Massa {
                get {
                    try {
                        return ((int)(this[this.tableMlData.MassaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.MassaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal B3 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.B3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.B3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal B30 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.B30Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.B30Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal B100 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.B100Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.B100Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal B800 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.B800Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.B800Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal B2500 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.B2500Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.B2500Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal B5000 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.B5000Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.B5000Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P1050 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P1050Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P1050Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P1350 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P1350Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P1350Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P1550 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P1550Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P1550Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P1750 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P1750Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P1750Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P004500 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P004500Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P004500Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Hd004500 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Hd004500Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Hd004500Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P01500 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P01500Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P01500Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Hd01500 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Hd01500Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Hd01500Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P0041000 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P0041000Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P0041000Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Hd0041000 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Hd0041000Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Hd0041000Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal P011000 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.P011000Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.P011000Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Hd01100 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Hd01100Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Hd01100Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Iup1 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Iup1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Iup1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Iup2 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Iup2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Iup2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Iup3 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Iup3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Iup3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Idown1 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Idown1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Idown1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Idown2 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Idown2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Idown2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Idown3 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Idown3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Idown3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adout {
                get {
                    try {
                        return ((string)(this[this.tableMlData.AdoutColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.AdoutColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adin {
                get {
                    try {
                        return ((string)(this[this.tableMlData.AdinColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.AdinColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Gib1 {
                get {
                    try {
                        return ((int)(this[this.tableMlData.Gib1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Gib1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Gib2 {
                get {
                    try {
                        return ((int)(this[this.tableMlData.Gib2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Gib2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Iup4 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Iup4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Iup4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Iup5 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Iup5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Iup5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Idown4 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Idown4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Idown4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Idown5 {
                get {
                    try {
                        return ((decimal)(this[this.tableMlData.Idown5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlData.Idown5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMassaNull() {
                return this.IsNull(this.tableMlData.MassaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMassaNull() {
                this[this.tableMlData.MassaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsB3Null() {
                return this.IsNull(this.tableMlData.B3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetB3Null() {
                this[this.tableMlData.B3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsB30Null() {
                return this.IsNull(this.tableMlData.B30Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetB30Null() {
                this[this.tableMlData.B30Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsB100Null() {
                return this.IsNull(this.tableMlData.B100Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetB100Null() {
                this[this.tableMlData.B100Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsB800Null() {
                return this.IsNull(this.tableMlData.B800Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetB800Null() {
                this[this.tableMlData.B800Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsB2500Null() {
                return this.IsNull(this.tableMlData.B2500Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetB2500Null() {
                this[this.tableMlData.B2500Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsB5000Null() {
                return this.IsNull(this.tableMlData.B5000Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetB5000Null() {
                this[this.tableMlData.B5000Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1050Null() {
                return this.IsNull(this.tableMlData.P1050Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1050Null() {
                this[this.tableMlData.P1050Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1350Null() {
                return this.IsNull(this.tableMlData.P1350Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1350Null() {
                this[this.tableMlData.P1350Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1550Null() {
                return this.IsNull(this.tableMlData.P1550Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1550Null() {
                this[this.tableMlData.P1550Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1750Null() {
                return this.IsNull(this.tableMlData.P1750Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1750Null() {
                this[this.tableMlData.P1750Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP004500Null() {
                return this.IsNull(this.tableMlData.P004500Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP004500Null() {
                this[this.tableMlData.P004500Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHd004500Null() {
                return this.IsNull(this.tableMlData.Hd004500Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHd004500Null() {
                this[this.tableMlData.Hd004500Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP01500Null() {
                return this.IsNull(this.tableMlData.P01500Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP01500Null() {
                this[this.tableMlData.P01500Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHd01500Null() {
                return this.IsNull(this.tableMlData.Hd01500Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHd01500Null() {
                this[this.tableMlData.Hd01500Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP0041000Null() {
                return this.IsNull(this.tableMlData.P0041000Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP0041000Null() {
                this[this.tableMlData.P0041000Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHd0041000Null() {
                return this.IsNull(this.tableMlData.Hd0041000Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHd0041000Null() {
                this[this.tableMlData.Hd0041000Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP011000Null() {
                return this.IsNull(this.tableMlData.P011000Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP011000Null() {
                this[this.tableMlData.P011000Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHd01100Null() {
                return this.IsNull(this.tableMlData.Hd01100Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHd01100Null() {
                this[this.tableMlData.Hd01100Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIup1Null() {
                return this.IsNull(this.tableMlData.Iup1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIup1Null() {
                this[this.tableMlData.Iup1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIup2Null() {
                return this.IsNull(this.tableMlData.Iup2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIup2Null() {
                this[this.tableMlData.Iup2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIup3Null() {
                return this.IsNull(this.tableMlData.Iup3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIup3Null() {
                this[this.tableMlData.Iup3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdown1Null() {
                return this.IsNull(this.tableMlData.Idown1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdown1Null() {
                this[this.tableMlData.Idown1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdown2Null() {
                return this.IsNull(this.tableMlData.Idown2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdown2Null() {
                this[this.tableMlData.Idown2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdown3Null() {
                return this.IsNull(this.tableMlData.Idown3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdown3Null() {
                this[this.tableMlData.Idown3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdoutNull() {
                return this.IsNull(this.tableMlData.AdoutColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdoutNull() {
                this[this.tableMlData.AdoutColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdinNull() {
                return this.IsNull(this.tableMlData.AdinColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdinNull() {
                this[this.tableMlData.AdinColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGib1Null() {
                return this.IsNull(this.tableMlData.Gib1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGib1Null() {
                this[this.tableMlData.Gib1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGib2Null() {
                return this.IsNull(this.tableMlData.Gib2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGib2Null() {
                this[this.tableMlData.Gib2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIup4Null() {
                return this.IsNull(this.tableMlData.Iup4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIup4Null() {
                this[this.tableMlData.Iup4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIup5Null() {
                return this.IsNull(this.tableMlData.Iup5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIup5Null() {
                this[this.tableMlData.Iup5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdown4Null() {
                return this.IsNull(this.tableMlData.Idown4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdown4Null() {
                this[this.tableMlData.Idown4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdown5Null() {
                return this.IsNull(this.tableMlData.Idown5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdown5Null() {
                this[this.tableMlData.Idown5Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public class MlDataRowChangeEvent : System.EventArgs {
            
            private MlDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataRowChangeEvent(MlDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MlDataProbeDataTable : Devart.Data.Oracle.OracleDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnDenMat;
            
            private System.Data.DataColumn columnKrvBeg;
            
            private System.Data.DataColumn columnKrvEnd;
            
            private System.Data.DataColumn columnVpKrvBeg;
            
            private System.Data.DataColumn columnVpKrvEnd;
            
            private System.Data.DataColumn columnOstNapr;
            
            private System.Data.DataColumn columnCofStar;
            
            private System.Data.DataColumn columnCofZapol;
            
            private System.Data.DataColumn columnAnzInduc;
            
            private System.Data.DataColumn columnTmpResist;
            
            private System.Data.DataColumn columnOtnosUdl;
            
            private System.Data.DataColumn columnTverd;
            
            private System.Data.DataColumn columnTpokrUp;
            
            private System.Data.DataColumn columnTpokrDown;
            
            private System.Data.DataColumn columnMgstrD;
            
            private System.Data.DataColumn columnMgstrDpp;
            
            private System.Data.DataColumn columnKorForce;
            
            private System.Data.DataColumn columnIsStat;
            
            private System.Data.DataColumn columnCofAnzUmp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataProbeDataTable() {
                this.TableName = "MlDataProbe";
                this.Name = "MlDataProbe";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlDataProbeDataTable(Devart.Data.Oracle.OracleDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MlDataProbeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DenMatColumn {
                get {
                    return this.columnDenMat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KrvBegColumn {
                get {
                    return this.columnKrvBeg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KrvEndColumn {
                get {
                    return this.columnKrvEnd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VpKrvBegColumn {
                get {
                    return this.columnVpKrvBeg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn VpKrvEndColumn {
                get {
                    return this.columnVpKrvEnd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn OstNaprColumn {
                get {
                    return this.columnOstNapr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CofStarColumn {
                get {
                    return this.columnCofStar;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CofZapolColumn {
                get {
                    return this.columnCofZapol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn AnzInducColumn {
                get {
                    return this.columnAnzInduc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TmpResistColumn {
                get {
                    return this.columnTmpResist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn OtnosUdlColumn {
                get {
                    return this.columnOtnosUdl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TverdColumn {
                get {
                    return this.columnTverd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TpokrUpColumn {
                get {
                    return this.columnTpokrUp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TpokrDownColumn {
                get {
                    return this.columnTpokrDown;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MgstrDColumn {
                get {
                    return this.columnMgstrD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MgstrDppColumn {
                get {
                    return this.columnMgstrDpp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn KorForceColumn {
                get {
                    return this.columnKorForce;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IsStatColumn {
                get {
                    return this.columnIsStat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CofAnzUmpColumn {
                get {
                    return this.columnCofAnzUmp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataProbeRow this[int index] {
                get {
                    return ((MlDataProbeRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event MlDataProbeRowChangeEventHandler MlDataProbeRowChanging;
            
            public event MlDataProbeRowChangeEventHandler MlDataProbeRowChanged;
            
            public event MlDataProbeRowChangeEventHandler MlDataProbeRowDeleting;
            
            public event MlDataProbeRowChangeEventHandler MlDataProbeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMlDataProbeRow(MlDataProbeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataProbeRow AddMlDataProbeRow(
                        string Id, 
                        decimal DenMat, 
                        int KrvBeg, 
                        int KrvEnd, 
                        string VpKrvBeg, 
                        string VpKrvEnd, 
                        int OstNapr, 
                        int CofStar, 
                        decimal CofZapol, 
                        decimal AnzInduc, 
                        int TmpResist, 
                        int OtnosUdl, 
                        int Tverd, 
                        decimal TpokrUp, 
                        decimal TpokrDown, 
                        decimal MgstrD, 
                        decimal MgstrDpp, 
                        decimal KorForce, 
                        int IsStat, 
                        int CofAnzUmp) {
                MlDataProbeRow rowMlDataProbeRow = ((MlDataProbeRow)(this.NewRow()));
                rowMlDataProbeRow.ItemArray = new object[] {
                        Id,
                        DenMat,
                        KrvBeg,
                        KrvEnd,
                        VpKrvBeg,
                        VpKrvEnd,
                        OstNapr,
                        CofStar,
                        CofZapol,
                        AnzInduc,
                        TmpResist,
                        OtnosUdl,
                        Tverd,
                        TpokrUp,
                        TpokrDown,
                        MgstrD,
                        MgstrDpp,
                        KorForce,
                        IsStat,
                        CofAnzUmp};
                this.Rows.Add(rowMlDataProbeRow);
                return rowMlDataProbeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataProbeRow FindById(string Id) {
                return ((MlDataProbeRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MlDataProbeDataTable cln = ((MlDataProbeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MlDataProbeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnDenMat = base.Columns["DenMat"];
                this.columnKrvBeg = base.Columns["KrvBeg"];
                this.columnKrvEnd = base.Columns["KrvEnd"];
                this.columnVpKrvBeg = base.Columns["VpKrvBeg"];
                this.columnVpKrvEnd = base.Columns["VpKrvEnd"];
                this.columnOstNapr = base.Columns["OstNapr"];
                this.columnCofStar = base.Columns["CofStar"];
                this.columnCofZapol = base.Columns["CofZapol"];
                this.columnAnzInduc = base.Columns["AnzInduc"];
                this.columnTmpResist = base.Columns["TmpResist"];
                this.columnOtnosUdl = base.Columns["OtnosUdl"];
                this.columnTverd = base.Columns["Tverd"];
                this.columnTpokrUp = base.Columns["TpokrUp"];
                this.columnTpokrDown = base.Columns["TpokrDown"];
                this.columnMgstrD = base.Columns["MgstrD"];
                this.columnMgstrDpp = base.Columns["MgstrDpp"];
                this.columnKorForce = base.Columns["KorForce"];
                this.columnIsStat = base.Columns["IsStat"];
                this.columnCofAnzUmp = base.Columns["CofAnzUmp"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnDenMat = new System.Data.DataColumn("DenMat", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDenMat);
                this.columnKrvBeg = new System.Data.DataColumn("KrvBeg", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKrvBeg);
                this.columnKrvEnd = new System.Data.DataColumn("KrvEnd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKrvEnd);
                this.columnVpKrvBeg = new System.Data.DataColumn("VpKrvBeg", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVpKrvBeg);
                this.columnVpKrvEnd = new System.Data.DataColumn("VpKrvEnd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVpKrvEnd);
                this.columnOstNapr = new System.Data.DataColumn("OstNapr", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOstNapr);
                this.columnCofStar = new System.Data.DataColumn("CofStar", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCofStar);
                this.columnCofZapol = new System.Data.DataColumn("CofZapol", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCofZapol);
                this.columnAnzInduc = new System.Data.DataColumn("AnzInduc", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnzInduc);
                this.columnTmpResist = new System.Data.DataColumn("TmpResist", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTmpResist);
                this.columnOtnosUdl = new System.Data.DataColumn("OtnosUdl", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtnosUdl);
                this.columnTverd = new System.Data.DataColumn("Tverd", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTverd);
                this.columnTpokrUp = new System.Data.DataColumn("TpokrUp", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTpokrUp);
                this.columnTpokrDown = new System.Data.DataColumn("TpokrDown", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTpokrDown);
                this.columnMgstrD = new System.Data.DataColumn("MgstrD", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMgstrD);
                this.columnMgstrDpp = new System.Data.DataColumn("MgstrDpp", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMgstrDpp);
                this.columnKorForce = new System.Data.DataColumn("KorForce", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKorForce);
                this.columnIsStat = new System.Data.DataColumn("IsStat", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsStat);
                this.columnCofAnzUmp = new System.Data.DataColumn("CofAnzUmp", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCofAnzUmp);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnId.Caption = "ID";
                this.columnId.MaxLength = 40;
                this.columnDenMat.Caption = "DENMAT";
                this.columnKrvBeg.Caption = "KRVBEG";
                this.columnKrvEnd.Caption = "KRVEND";
                this.columnVpKrvBeg.Caption = "VP_KRVBEG";
                this.columnVpKrvBeg.MaxLength = 1;
                this.columnVpKrvEnd.Caption = "VP_KRVEND";
                this.columnVpKrvEnd.MaxLength = 1;
                this.columnOstNapr.Caption = "OSTNAPR";
                this.columnCofStar.Caption = "COFSTAR";
                this.columnCofZapol.Caption = "COFZAPOL";
                this.columnAnzInduc.Caption = "ANZINDUC";
                this.columnTmpResist.Caption = "TMPRESIST";
                this.columnOtnosUdl.Caption = "OTNOSUDL";
                this.columnTverd.Caption = "TVERD";
                this.columnTpokrUp.Caption = "TPOKRUP";
                this.columnTpokrDown.Caption = "TPOKRDOWN";
                this.columnMgstrD.Caption = "MGSTRD";
                this.columnMgstrDpp.Caption = "MGSTRDPP";
                this.columnKorForce.Caption = "KORFORCE";
                this.columnIsStat.Caption = "ISSTAT";
                this.columnCofAnzUmp.Caption = "COFANZUMP";
                this.Connection = new Devart.Data.Oracle.OracleConnection("User Id=lims;Password=lims;Server=M2TST;");
                this.SelectCommand = new Devart.Data.Oracle.OracleCommand(@"SELECT  ID, DENMAT, KRVBEG, KRVEND, VP_KRVBEG, VP_KRVEND, OSTNAPR, COFSTAR, COFZAPOL,
              ANZINDUC, TMPRESIST, OTNOSUDL, TVERD, TPOKRUP, TPOKRDOWN, MGSTRD, MGSTRDPP,
              KORFORCE, ISSTAT, COFANZUMP 
FROM LIMS.ML_MDATAP
WHERE ID = :PID
", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.Oracle.OracleParameter param;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PID";
                param.Size = 1024;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                this.InsertCommand = new Devart.Data.Oracle.OracleCommand(@"INSERT INTO ""LIMS"".""ML_MDATAP"" (""ID"", ""DENMAT"", ""KRVBEG"", ""KRVEND"", ""VP_KRVBEG"", ""VP_KRVEND"", ""OSTNAPR"", ""COFSTAR"", ""COFZAPOL"", ""ANZINDUC"", ""TMPRESIST"", ""OTNOSUDL"", ""TVERD"", ""TPOKRUP"", ""TPOKRDOWN"", ""MGSTRD"", ""MGSTRDPP"", ""KORFORCE"", ""ISSTAT"") VALUES (:ID, :DENMAT, :KRVBEG, :KRVEND, :VP_KRVBEG, :VP_KRVEND, :OSTNAPR, :COFSTAR, :COFZAPOL, :ANZINDUC, :TMPRESIST, :OTNOSUDL, :TVERD, :TPOKRUP, :TPOKRDOWN, :MGSTRD, :MGSTRDPP, :KORFORCE, :ISSTAT)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DENMAT";
                param.Size = 0;
                param.SourceColumn = "DENMAT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KRVBEG";
                param.Size = 0;
                param.SourceColumn = "KRVBEG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KRVEND";
                param.Size = 0;
                param.SourceColumn = "KRVEND";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VP_KRVBEG";
                param.Size = 0;
                param.SourceColumn = "VP_KRVBEG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VP_KRVEND";
                param.Size = 0;
                param.SourceColumn = "VP_KRVEND";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OSTNAPR";
                param.Size = 0;
                param.SourceColumn = "OSTNAPR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COFSTAR";
                param.Size = 0;
                param.SourceColumn = "COFSTAR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COFZAPOL";
                param.Size = 0;
                param.SourceColumn = "COFZAPOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANZINDUC";
                param.Size = 0;
                param.SourceColumn = "ANZINDUC";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TMPRESIST";
                param.Size = 0;
                param.SourceColumn = "TMPRESIST";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OTNOSUDL";
                param.Size = 0;
                param.SourceColumn = "OTNOSUDL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TVERD";
                param.Size = 0;
                param.SourceColumn = "TVERD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TPOKRUP";
                param.Size = 0;
                param.SourceColumn = "TPOKRUP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TPOKRDOWN";
                param.Size = 0;
                param.SourceColumn = "TPOKRDOWN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MGSTRD";
                param.Size = 0;
                param.SourceColumn = "MGSTRD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MGSTRDPP";
                param.Size = 0;
                param.SourceColumn = "MGSTRDPP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KORFORCE";
                param.Size = 0;
                param.SourceColumn = "KORFORCE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ISSTAT";
                param.Size = 0;
                param.SourceColumn = "ISSTAT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.Oracle.OracleCommand(@"UPDATE    LIMS.ML_MDATAP
SET              DENMAT = :DENMAT, KRVBEG = :KRVBEG, KRVEND = :KRVEND, VP_KRVBEG = :VP_KRVBEG, VP_KRVEND = :VP_KRVEND, OSTNAPR = :OSTNAPR, 
                      COFSTAR = :COFSTAR, COFZAPOL = :COFZAPOL, ANZINDUC = :ANZINDUC, TMPRESIST = :TMPRESIST, OTNOSUDL = :OTNOSUDL, TVERD = :TVERD, 
                      TPOKRUP = :TPOKRUP, TPOKRDOWN = :TPOKRDOWN, MGSTRD = :MGSTRD, MGSTRDPP = :MGSTRDPP, KORFORCE = :KORFORCE, ISSTAT = :ISSTAT, COFANZUMP = :COFANZUMP 
WHERE     (ID = :Original_ID)", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DENMAT";
                param.Size = 0;
                param.SourceColumn = "DENMAT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KRVBEG";
                param.Size = 0;
                param.SourceColumn = "KRVBEG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KRVEND";
                param.Size = 0;
                param.SourceColumn = "KRVEND";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VP_KRVBEG";
                param.Size = 1024;
                param.SourceColumn = "VP_KRVBEG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "VP_KRVEND";
                param.Size = 1024;
                param.SourceColumn = "VP_KRVEND";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OSTNAPR";
                param.Size = 0;
                param.SourceColumn = "OSTNAPR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COFSTAR";
                param.Size = 0;
                param.SourceColumn = "COFSTAR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COFZAPOL";
                param.Size = 0;
                param.SourceColumn = "COFZAPOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANZINDUC";
                param.Size = 0;
                param.SourceColumn = "ANZINDUC";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TMPRESIST";
                param.Size = 0;
                param.SourceColumn = "TMPRESIST";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OTNOSUDL";
                param.Size = 0;
                param.SourceColumn = "OTNOSUDL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TVERD";
                param.Size = 0;
                param.SourceColumn = "TVERD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TPOKRUP";
                param.Size = 0;
                param.SourceColumn = "TPOKRUP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TPOKRDOWN";
                param.Size = 0;
                param.SourceColumn = "TPOKRDOWN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MGSTRD";
                param.Size = 0;
                param.SourceColumn = "MGSTRD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "MGSTRDPP";
                param.Size = 0;
                param.SourceColumn = "MGSTRDPP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "KORFORCE";
                param.Size = 0;
                param.SourceColumn = "KORFORCE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ISSTAT";
                param.Size = 0;
                param.SourceColumn = "ISSTAT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "COFANZUMP";
                param.Size = 0;
                param.SourceColumn = "COFANZUMP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID";
                param.Size = 1024;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.Oracle.OracleCommand("DELETE FROM \"LIMS\".\"ML_MDATAP\" WHERE ((\"ID\" = :Original_ID) AND ((:IsNull_DENMAT " +
                        "= 1 AND \"DENMAT\" IS NULL) OR (\"DENMAT\" = :Original_DENMAT)) AND ((:IsNull_KRVBEG" +
                        " = 1 AND \"KRVBEG\" IS NULL) OR (\"KRVBEG\" = :Original_KRVBEG)) AND ((:IsNull_KRVEN" +
                        "D = 1 AND \"KRVEND\" IS NULL) OR (\"KRVEND\" = :Original_KRVEND)) AND ((:IsNull_VP_K" +
                        "RVBEG = 1 AND \"VP_KRVBEG\" IS NULL) OR (\"VP_KRVBEG\" = :Original_VP_KRVBEG)) AND (" +
                        "(:IsNull_VP_KRVEND = 1 AND \"VP_KRVEND\" IS NULL) OR (\"VP_KRVEND\" = :Original_VP_K" +
                        "RVEND)) AND ((:IsNull_OSTNAPR = 1 AND \"OSTNAPR\" IS NULL) OR (\"OSTNAPR\" = :Origin" +
                        "al_OSTNAPR)) AND ((:IsNull_COFSTAR = 1 AND \"COFSTAR\" IS NULL) OR (\"COFSTAR\" = :O" +
                        "riginal_COFSTAR)) AND ((:IsNull_COFZAPOL = 1 AND \"COFZAPOL\" IS NULL) OR (\"COFZAP" +
                        "OL\" = :Original_COFZAPOL)) AND ((:IsNull_ANZINDUC = 1 AND \"ANZINDUC\" IS NULL) OR" +
                        " (\"ANZINDUC\" = :Original_ANZINDUC)) AND ((:IsNull_TMPRESIST = 1 AND \"TMPRESIST\" " +
                        "IS NULL) OR (\"TMPRESIST\" = :Original_TMPRESIST)) AND ((:IsNull_OTNOSUDL = 1 AND " +
                        "\"OTNOSUDL\" IS NULL) OR (\"OTNOSUDL\" = :Original_OTNOSUDL)) AND ((:IsNull_TVERD = " +
                        "1 AND \"TVERD\" IS NULL) OR (\"TVERD\" = :Original_TVERD)) AND ((:IsNull_TPOKRUP = 1" +
                        " AND \"TPOKRUP\" IS NULL) OR (\"TPOKRUP\" = :Original_TPOKRUP)) AND ((:IsNull_TPOKRD" +
                        "OWN = 1 AND \"TPOKRDOWN\" IS NULL) OR (\"TPOKRDOWN\" = :Original_TPOKRDOWN)) AND ((:" +
                        "IsNull_MGSTRD = 1 AND \"MGSTRD\" IS NULL) OR (\"MGSTRD\" = :Original_MGSTRD)) AND ((" +
                        ":IsNull_MGSTRDPP = 1 AND \"MGSTRDPP\" IS NULL) OR (\"MGSTRDPP\" = :Original_MGSTRDPP" +
                        ")) AND ((:IsNull_KORFORCE = 1 AND \"KORFORCE\" IS NULL) OR (\"KORFORCE\" = :Original" +
                        "_KORFORCE)) AND ((:IsNull_ISSTAT = 1 AND \"ISSTAT\" IS NULL) OR (\"ISSTAT\" = :Origi" +
                        "nal_ISSTAT)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID";
                param.Size = 0;
                param.SourceColumn = "ID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DENMAT";
                param.Size = 0;
                param.SourceColumn = "DENMAT";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DENMAT";
                param.Size = 0;
                param.SourceColumn = "DENMAT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_KRVBEG";
                param.Size = 0;
                param.SourceColumn = "KRVBEG";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KRVBEG";
                param.Size = 0;
                param.SourceColumn = "KRVBEG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_KRVEND";
                param.Size = 0;
                param.SourceColumn = "KRVEND";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KRVEND";
                param.Size = 0;
                param.SourceColumn = "KRVEND";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_VP_KRVBEG";
                param.Size = 0;
                param.SourceColumn = "VP_KRVBEG";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VP_KRVBEG";
                param.Size = 0;
                param.SourceColumn = "VP_KRVBEG";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_VP_KRVEND";
                param.Size = 0;
                param.SourceColumn = "VP_KRVEND";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_VP_KRVEND";
                param.Size = 0;
                param.SourceColumn = "VP_KRVEND";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_OSTNAPR";
                param.Size = 0;
                param.SourceColumn = "OSTNAPR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_OSTNAPR";
                param.Size = 0;
                param.SourceColumn = "OSTNAPR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_COFSTAR";
                param.Size = 0;
                param.SourceColumn = "COFSTAR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COFSTAR";
                param.Size = 0;
                param.SourceColumn = "COFSTAR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_COFZAPOL";
                param.Size = 0;
                param.SourceColumn = "COFZAPOL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_COFZAPOL";
                param.Size = 0;
                param.SourceColumn = "COFZAPOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ANZINDUC";
                param.Size = 0;
                param.SourceColumn = "ANZINDUC";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANZINDUC";
                param.Size = 0;
                param.SourceColumn = "ANZINDUC";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TMPRESIST";
                param.Size = 0;
                param.SourceColumn = "TMPRESIST";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TMPRESIST";
                param.Size = 0;
                param.SourceColumn = "TMPRESIST";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_OTNOSUDL";
                param.Size = 0;
                param.SourceColumn = "OTNOSUDL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_OTNOSUDL";
                param.Size = 0;
                param.SourceColumn = "OTNOSUDL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TVERD";
                param.Size = 0;
                param.SourceColumn = "TVERD";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TVERD";
                param.Size = 0;
                param.SourceColumn = "TVERD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TPOKRUP";
                param.Size = 0;
                param.SourceColumn = "TPOKRUP";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TPOKRUP";
                param.Size = 0;
                param.SourceColumn = "TPOKRUP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TPOKRDOWN";
                param.Size = 0;
                param.SourceColumn = "TPOKRDOWN";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TPOKRDOWN";
                param.Size = 0;
                param.SourceColumn = "TPOKRDOWN";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_MGSTRD";
                param.Size = 0;
                param.SourceColumn = "MGSTRD";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MGSTRD";
                param.Size = 0;
                param.SourceColumn = "MGSTRD";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_MGSTRDPP";
                param.Size = 0;
                param.SourceColumn = "MGSTRDPP";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_MGSTRDPP";
                param.Size = 0;
                param.SourceColumn = "MGSTRDPP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_KORFORCE";
                param.Size = 0;
                param.SourceColumn = "KORFORCE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Double;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_KORFORCE";
                param.Size = 0;
                param.SourceColumn = "KORFORCE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ISSTAT";
                param.Size = 0;
                param.SourceColumn = "ISSTAT";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.Decimal;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ISSTAT";
                param.Size = 0;
                param.SourceColumn = "ISSTAT";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "MlDataProbe";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("ID", "Id");
                this.TableMapping.ColumnMappings.Add("DENMAT", "DenMat");
                this.TableMapping.ColumnMappings.Add("KRVBEG", "KrvBeg");
                this.TableMapping.ColumnMappings.Add("KRVEND", "KrvEnd");
                this.TableMapping.ColumnMappings.Add("VP_KRVBEG", "VpKrvBeg");
                this.TableMapping.ColumnMappings.Add("VP_KRVEND", "VpKrvEnd");
                this.TableMapping.ColumnMappings.Add("OSTNAPR", "OstNapr");
                this.TableMapping.ColumnMappings.Add("COFSTAR", "CofStar");
                this.TableMapping.ColumnMappings.Add("COFZAPOL", "CofZapol");
                this.TableMapping.ColumnMappings.Add("ANZINDUC", "AnzInduc");
                this.TableMapping.ColumnMappings.Add("TMPRESIST", "TmpResist");
                this.TableMapping.ColumnMappings.Add("OTNOSUDL", "OtnosUdl");
                this.TableMapping.ColumnMappings.Add("TVERD", "Tverd");
                this.TableMapping.ColumnMappings.Add("TPOKRUP", "TpokrUp");
                this.TableMapping.ColumnMappings.Add("TPOKRDOWN", "TpokrDown");
                this.TableMapping.ColumnMappings.Add("MGSTRD", "MgstrD");
                this.TableMapping.ColumnMappings.Add("MGSTRDPP", "MgstrDpp");
                this.TableMapping.ColumnMappings.Add("KORFORCE", "KorForce");
                this.TableMapping.ColumnMappings.Add("ISSTAT", "IsStat");
                this.TableMapping.ColumnMappings.Add("COFANZUMP", "CofAnzUmp");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataProbeRow NewMlDataProbeRow() {
                return ((MlDataProbeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MlDataProbeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MlDataProbeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MlDataProbeRowChanged != null)) {
                    this.MlDataProbeRowChanged(this, new MlDataProbeRowChangeEvent(((MlDataProbeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MlDataProbeRowChanging != null)) {
                    this.MlDataProbeRowChanging(this, new MlDataProbeRowChangeEvent(((MlDataProbeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MlDataProbeRowDeleted != null)) {
                    this.MlDataProbeRowDeleted(this, new MlDataProbeRowChangeEvent(((MlDataProbeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MlDataProbeRowDeleting != null)) {
                    this.MlDataProbeRowDeleting(this, new MlDataProbeRowChangeEvent(((MlDataProbeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMlDataProbeRow(MlDataProbeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DsMagLab ds = new DsMagLab();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MlDataProbeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public partial class MlDataProbeRow : System.Data.DataRow {
            
            private MlDataProbeDataTable tableMlDataProbe;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlDataProbeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMlDataProbe = ((MlDataProbeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Id {
                get {
                    return ((string)(this[this.tableMlDataProbe.IdColumn]));
                }
                set {
                    this[this.tableMlDataProbe.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DenMat {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.DenMatColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.DenMatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KrvBeg {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.KrvBegColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.KrvBegColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KrvEnd {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.KrvEndColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.KrvEndColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VpKrvBeg {
                get {
                    try {
                        return ((string)(this[this.tableMlDataProbe.VpKrvBegColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.VpKrvBegColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VpKrvEnd {
                get {
                    try {
                        return ((string)(this[this.tableMlDataProbe.VpKrvEndColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.VpKrvEndColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OstNapr {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.OstNaprColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.OstNaprColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CofStar {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.CofStarColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.CofStarColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CofZapol {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.CofZapolColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.CofZapolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AnzInduc {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.AnzInducColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.AnzInducColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TmpResist {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.TmpResistColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.TmpResistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OtnosUdl {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.OtnosUdlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.OtnosUdlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Tverd {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.TverdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.TverdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TpokrUp {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.TpokrUpColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.TpokrUpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TpokrDown {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.TpokrDownColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.TpokrDownColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MgstrD {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.MgstrDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.MgstrDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MgstrDpp {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.MgstrDppColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.MgstrDppColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal KorForce {
                get {
                    try {
                        return ((decimal)(this[this.tableMlDataProbe.KorForceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.KorForceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsStat {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.IsStatColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.IsStatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CofAnzUmp {
                get {
                    try {
                        return ((int)(this[this.tableMlDataProbe.CofAnzUmpColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlDataProbe.CofAnzUmpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDenMatNull() {
                return this.IsNull(this.tableMlDataProbe.DenMatColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDenMatNull() {
                this[this.tableMlDataProbe.DenMatColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKrvBegNull() {
                return this.IsNull(this.tableMlDataProbe.KrvBegColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKrvBegNull() {
                this[this.tableMlDataProbe.KrvBegColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKrvEndNull() {
                return this.IsNull(this.tableMlDataProbe.KrvEndColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKrvEndNull() {
                this[this.tableMlDataProbe.KrvEndColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVpKrvBegNull() {
                return this.IsNull(this.tableMlDataProbe.VpKrvBegColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVpKrvBegNull() {
                this[this.tableMlDataProbe.VpKrvBegColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVpKrvEndNull() {
                return this.IsNull(this.tableMlDataProbe.VpKrvEndColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVpKrvEndNull() {
                this[this.tableMlDataProbe.VpKrvEndColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOstNaprNull() {
                return this.IsNull(this.tableMlDataProbe.OstNaprColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOstNaprNull() {
                this[this.tableMlDataProbe.OstNaprColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCofStarNull() {
                return this.IsNull(this.tableMlDataProbe.CofStarColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCofStarNull() {
                this[this.tableMlDataProbe.CofStarColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCofZapolNull() {
                return this.IsNull(this.tableMlDataProbe.CofZapolColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCofZapolNull() {
                this[this.tableMlDataProbe.CofZapolColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnzInducNull() {
                return this.IsNull(this.tableMlDataProbe.AnzInducColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnzInducNull() {
                this[this.tableMlDataProbe.AnzInducColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTmpResistNull() {
                return this.IsNull(this.tableMlDataProbe.TmpResistColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTmpResistNull() {
                this[this.tableMlDataProbe.TmpResistColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtnosUdlNull() {
                return this.IsNull(this.tableMlDataProbe.OtnosUdlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtnosUdlNull() {
                this[this.tableMlDataProbe.OtnosUdlColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTverdNull() {
                return this.IsNull(this.tableMlDataProbe.TverdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTverdNull() {
                this[this.tableMlDataProbe.TverdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTpokrUpNull() {
                return this.IsNull(this.tableMlDataProbe.TpokrUpColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTpokrUpNull() {
                this[this.tableMlDataProbe.TpokrUpColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTpokrDownNull() {
                return this.IsNull(this.tableMlDataProbe.TpokrDownColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTpokrDownNull() {
                this[this.tableMlDataProbe.TpokrDownColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMgstrDNull() {
                return this.IsNull(this.tableMlDataProbe.MgstrDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMgstrDNull() {
                this[this.tableMlDataProbe.MgstrDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMgstrDppNull() {
                return this.IsNull(this.tableMlDataProbe.MgstrDppColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMgstrDppNull() {
                this[this.tableMlDataProbe.MgstrDppColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKorForceNull() {
                return this.IsNull(this.tableMlDataProbe.KorForceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKorForceNull() {
                this[this.tableMlDataProbe.KorForceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsStatNull() {
                return this.IsNull(this.tableMlDataProbe.IsStatColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsStatNull() {
                this[this.tableMlDataProbe.IsStatColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCofAnzUmpNull() {
                return this.IsNull(this.tableMlDataProbe.CofAnzUmpColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCofAnzUmpNull() {
                this[this.tableMlDataProbe.CofAnzUmpColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public class MlDataProbeRowChangeEvent : System.EventArgs {
            
            private MlDataProbeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataProbeRowChangeEvent(MlDataProbeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlDataProbeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MlUsetDataTable : Devart.Data.Oracle.OracleDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUtype;
            
            private System.Data.DataColumn columnMeasurementType;
            
            private System.Data.DataColumn columnFtag;
            
            private System.Data.DataColumn columnIsSample;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlUsetDataTable() {
                this.TableName = "MlUset";
                this.Name = "MlUset";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlUsetDataTable(Devart.Data.Oracle.OracleDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MlUsetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn UtypeColumn {
                get {
                    return this.columnUtype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MeasurementTypeColumn {
                get {
                    return this.columnMeasurementType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn FtagColumn {
                get {
                    return this.columnFtag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IsSampleColumn {
                get {
                    return this.columnIsSample;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlUsetRow this[int index] {
                get {
                    return ((MlUsetRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event MlUsetRowChangeEventHandler MlUsetRowChanging;
            
            public event MlUsetRowChangeEventHandler MlUsetRowChanged;
            
            public event MlUsetRowChangeEventHandler MlUsetRowDeleting;
            
            public event MlUsetRowChangeEventHandler MlUsetRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMlUsetRow(MlUsetRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlUsetRow AddMlUsetRow(int Utype, string MeasurementType, int Ftag, int IsSample) {
                MlUsetRow rowMlUsetRow = ((MlUsetRow)(this.NewRow()));
                rowMlUsetRow.ItemArray = new object[] {
                        Utype,
                        MeasurementType,
                        Ftag,
                        IsSample};
                this.Rows.Add(rowMlUsetRow);
                return rowMlUsetRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlUsetRow FindByUtypeFtag(int Utype, int Ftag) {
                return ((MlUsetRow)(this.Rows.Find(new object[] {
                            Utype,
                            Ftag})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MlUsetDataTable cln = ((MlUsetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MlUsetDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUtype = base.Columns["Utype"];
                this.columnMeasurementType = base.Columns["MeasurementType"];
                this.columnFtag = base.Columns["Ftag"];
                this.columnIsSample = base.Columns["IsSample"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUtype = new System.Data.DataColumn("Utype", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUtype);
                this.columnMeasurementType = new System.Data.DataColumn("MeasurementType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementType);
                this.columnFtag = new System.Data.DataColumn("Ftag", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFtag);
                this.columnIsSample = new System.Data.DataColumn("IsSample", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSample);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUtype,
                                this.columnFtag}, true));
                this.columnUtype.AllowDBNull = false;
                this.columnUtype.Caption = "UTYPE";
                this.columnMeasurementType.AllowDBNull = false;
                this.columnMeasurementType.Caption = "MEASUREMENTTYPE";
                this.columnMeasurementType.MaxLength = 20;
                this.columnFtag.AllowDBNull = false;
                this.columnFtag.Caption = "FTAG";
                this.columnIsSample.Caption = "IS_SAMPLE";
                this.Connection = new Devart.Data.Oracle.OracleConnection("User Id=lims;Password=lims;Server=M2TST;");
                this.SelectCommand = new Devart.Data.Oracle.OracleCommand("SELECT UTYPE, MEASUREMENTTYPE, FTAG, IS_SAMPLE FROM LIMS.V_MLUSET WHERE (SAMPLEID" +
                        " = :SID)", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.Oracle.OracleParameter param;
                param = new Devart.Data.Oracle.OracleParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SID";
                param.Size = 1024;
                param.SourceColumn = "SAMPLEID";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.SelectCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "MlUset";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("UTYPE", "Utype");
                this.TableMapping.ColumnMappings.Add("MEASUREMENTTYPE", "MeasurementType");
                this.TableMapping.ColumnMappings.Add("FTAG", "Ftag");
                this.TableMapping.ColumnMappings.Add("IS_SAMPLE", "IsSample");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlUsetRow NewMlUsetRow() {
                return ((MlUsetRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MlUsetRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MlUsetRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MlUsetRowChanged != null)) {
                    this.MlUsetRowChanged(this, new MlUsetRowChangeEvent(((MlUsetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MlUsetRowChanging != null)) {
                    this.MlUsetRowChanging(this, new MlUsetRowChangeEvent(((MlUsetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MlUsetRowDeleted != null)) {
                    this.MlUsetRowDeleted(this, new MlUsetRowChangeEvent(((MlUsetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MlUsetRowDeleting != null)) {
                    this.MlUsetRowDeleting(this, new MlUsetRowChangeEvent(((MlUsetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMlUsetRow(MlUsetRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DsMagLab ds = new DsMagLab();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MlUsetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public partial class MlUsetRow : System.Data.DataRow {
            
            private MlUsetDataTable tableMlUset;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlUsetRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMlUset = ((MlUsetDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Utype {
                get {
                    return ((int)(this[this.tableMlUset.UtypeColumn]));
                }
                set {
                    this[this.tableMlUset.UtypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementType {
                get {
                    return ((string)(this[this.tableMlUset.MeasurementTypeColumn]));
                }
                set {
                    this[this.tableMlUset.MeasurementTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Ftag {
                get {
                    return ((int)(this[this.tableMlUset.FtagColumn]));
                }
                set {
                    this[this.tableMlUset.FtagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsSample {
                get {
                    try {
                        return ((int)(this[this.tableMlUset.IsSampleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlUset.IsSampleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSampleNull() {
                return this.IsNull(this.tableMlUset.IsSampleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSampleNull() {
                this[this.tableMlUset.IsSampleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public class MlUsetRowChangeEvent : System.EventArgs {
            
            private MlUsetRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlUsetRowChangeEvent(MlUsetRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlUsetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MlValDataDataTable : Devart.Data.Oracle.OracleDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSteelType;
            
            private System.Data.DataColumn columnFtag;
            
            private System.Data.DataColumn columnUtype;
            
            private System.Data.DataColumn columnIsValidate;
            
            private System.Data.DataColumn columnMinVal;
            
            private System.Data.DataColumn columnMaxVal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlValDataDataTable() {
                this.TableName = "MlValData";
                this.Name = "MlValData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlValDataDataTable(Devart.Data.Oracle.OracleDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MlValDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SteelTypeColumn {
                get {
                    return this.columnSteelType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn FtagColumn {
                get {
                    return this.columnFtag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn UtypeColumn {
                get {
                    return this.columnUtype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IsValidateColumn {
                get {
                    return this.columnIsValidate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MinValColumn {
                get {
                    return this.columnMinVal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn MaxValColumn {
                get {
                    return this.columnMaxVal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlValDataRow this[int index] {
                get {
                    return ((MlValDataRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.Oracle.OracleConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event MlValDataRowChangeEventHandler MlValDataRowChanging;
            
            public event MlValDataRowChangeEventHandler MlValDataRowChanged;
            
            public event MlValDataRowChangeEventHandler MlValDataRowDeleting;
            
            public event MlValDataRowChangeEventHandler MlValDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMlValDataRow(MlValDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlValDataRow AddMlValDataRow(string SteelType, int Ftag, int Utype, int IsValidate, decimal MinVal, decimal MaxVal) {
                MlValDataRow rowMlValDataRow = ((MlValDataRow)(this.NewRow()));
                rowMlValDataRow.ItemArray = new object[] {
                        SteelType,
                        Ftag,
                        Utype,
                        IsValidate,
                        MinVal,
                        MaxVal};
                this.Rows.Add(rowMlValDataRow);
                return rowMlValDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlValDataRow FindBySteelTypeFtagUtype(string SteelType, int Ftag, int Utype) {
                return ((MlValDataRow)(this.Rows.Find(new object[] {
                            SteelType,
                            Ftag,
                            Utype})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MlValDataDataTable cln = ((MlValDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MlValDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSteelType = base.Columns["SteelType"];
                this.columnFtag = base.Columns["Ftag"];
                this.columnUtype = base.Columns["Utype"];
                this.columnIsValidate = base.Columns["IsValidate"];
                this.columnMinVal = base.Columns["MinVal"];
                this.columnMaxVal = base.Columns["MaxVal"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSteelType = new System.Data.DataColumn("SteelType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteelType);
                this.columnFtag = new System.Data.DataColumn("Ftag", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFtag);
                this.columnUtype = new System.Data.DataColumn("Utype", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUtype);
                this.columnIsValidate = new System.Data.DataColumn("IsValidate", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValidate);
                this.columnMinVal = new System.Data.DataColumn("MinVal", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinVal);
                this.columnMaxVal = new System.Data.DataColumn("MaxVal", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxVal);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSteelType,
                                this.columnFtag,
                                this.columnUtype}, true));
                this.columnSteelType.AllowDBNull = false;
                this.columnSteelType.Caption = "STEELTYPE";
                this.columnSteelType.MaxLength = 5;
                this.columnFtag.AllowDBNull = false;
                this.columnFtag.Caption = "FTAG";
                this.columnUtype.AllowDBNull = false;
                this.columnIsValidate.Caption = "IS_VALIDATE";
                this.columnMinVal.Caption = "MIN_VALUE";
                this.columnMaxVal.Caption = "MAX_VALUE";
                this.Connection = new Devart.Data.Oracle.OracleConnection("User Id=lims;Password=lims;Server=M2TST;");
                this.SelectCommand = new Devart.Data.Oracle.OracleCommand("SELECT STEELTYPE, UTYPE, FTAG, IS_VALIDATE, MIN_VALUE, MAX_VALUE FROM LIMS.ML_VAL" +
                        "DATA", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.TableMapping.DataSetTable = "MlValData";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("STEELTYPE", "SteelType");
                this.TableMapping.ColumnMappings.Add("FTAG", "Ftag");
                this.TableMapping.ColumnMappings.Add("IS_VALIDATE", "IsValidate");
                this.TableMapping.ColumnMappings.Add("MIN_VALUE", "MinVal");
                this.TableMapping.ColumnMappings.Add("MAX_VALUE", "MaxVal");
                this.TableMapping.ColumnMappings.Add("UTYPE", "Utype");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlValDataRow NewMlValDataRow() {
                return ((MlValDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MlValDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MlValDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MlValDataRowChanged != null)) {
                    this.MlValDataRowChanged(this, new MlValDataRowChangeEvent(((MlValDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MlValDataRowChanging != null)) {
                    this.MlValDataRowChanging(this, new MlValDataRowChangeEvent(((MlValDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MlValDataRowDeleted != null)) {
                    this.MlValDataRowDeleted(this, new MlValDataRowChangeEvent(((MlValDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MlValDataRowDeleting != null)) {
                    this.MlValDataRowDeleting(this, new MlValDataRowChangeEvent(((MlValDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMlValDataRow(MlValDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DsMagLab ds = new DsMagLab();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MlValDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public partial class MlValDataRow : System.Data.DataRow {
            
            private MlValDataDataTable tableMlValData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MlValDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMlValData = ((MlValDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SteelType {
                get {
                    return ((string)(this[this.tableMlValData.SteelTypeColumn]));
                }
                set {
                    this[this.tableMlValData.SteelTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Ftag {
                get {
                    return ((int)(this[this.tableMlValData.FtagColumn]));
                }
                set {
                    this[this.tableMlValData.FtagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Utype {
                get {
                    return ((int)(this[this.tableMlValData.UtypeColumn]));
                }
                set {
                    this[this.tableMlValData.UtypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsValidate {
                get {
                    try {
                        return ((int)(this[this.tableMlValData.IsValidateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlValData.IsValidateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinVal {
                get {
                    try {
                        return ((decimal)(this[this.tableMlValData.MinValColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlValData.MinValColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxVal {
                get {
                    try {
                        return ((decimal)(this[this.tableMlValData.MaxValColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMlValData.MaxValColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValidateNull() {
                return this.IsNull(this.tableMlValData.IsValidateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValidateNull() {
                this[this.tableMlValData.IsValidateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinValNull() {
                return this.IsNull(this.tableMlValData.MinValColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinValNull() {
                this[this.tableMlValData.MinValColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxValNull() {
                return this.IsNull(this.tableMlValData.MaxValColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxValNull() {
                this[this.tableMlValData.MaxValColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.236.0")]
        public class MlValDataRowChangeEvent : System.EventArgs {
            
            private MlValDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlValDataRowChangeEvent(MlValDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MlValDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
